motif_finder::base::Motif::generate_waveform() /home/alimf/motif_finder_project/motif_finder/target/release/timetrial
Event: cycles

  0.00         push         %rbp
  0.00         push         %r15
               push         %r14
               push         %r13
               push         %r12
               push         %rbx
               sub          $0x178,%rsp
               mov          0x58(%rdx),%rax
  0.00         mov          %rsi,0x38(%rsp)
               mov          %rdi,0x80(%rsp)
               lea          0x120(%rsp),%rdi
               mov          %rdx,%rsi
               mov          %rdx,%r15
               movabs       $0xfffffffffffffff,%rbx
               mov          %rax,0x20(%rsp)
             → callq        *0x329c73(%rip)        # 36b4b8 <_GLOBAL_OFFSET_TABLE_+0x998>
               mov          0x48(%r15),%r12
               mov          $0x8,%eax
               mov          %rax,0x18(%rsp)
               mov          0x18(%r12),%r15
  0.00         mov          0x28(%r12),%rbp
               test         %rbp,%rbp
             ↓ je           9e
               cmp          %rbx,%rbp
             ↓ ja           5a7
               lea          0x0(,%rbp,8),%r13
               test         %r13,%r13
             ↓ je           9e
               lea          __rust_no_alloc_shim_is_unstable,%rax
               mov          $0x8,%esi
               mov          %r13,%rdi
               movzbl       (%rax),%eax
             → callq        *0x32a620(%rip)        # 36beb0 <_GLOBAL_OFFSET_TABLE_+0x1390>
               test         %rax,%rax
             ↓ je           5b7
               mov          %rax,%r14
             ↓ jmp          a7
         9e:   xor          %r13d,%r13d
               mov          $0x8,%r14d
         a7:   mov          %r14,%rdi
               mov          %r15,%rsi
               mov          %r13,%rdx
             → callq        *0x329b12(%rip)        # 36b3c8 <memcpy@GLIBC_2.14>
               mov          %r14,0xf0(%rsp)
               mov          %rbp,0xf8(%rsp)
               mov          %rbp,0x100(%rsp)
               mov          %r14,0x28(%rsp)
  0.00         mov          0x40(%r12),%rax
  0.00         mov          0x30(%r12),%r15
               mov          %rax,0x40(%rsp)
               test         %rax,%rax
             ↓ je           132
               cmp          %rbx,%rax
             ↓ ja           5af
               lea          0x0(,%rax,8),%r13
               test         %r13,%r13
             ↓ je           132
               lea          __rust_no_alloc_shim_is_unstable,%rax
               mov          $0x8,%esi
               mov          %r13,%rdi
               movzbl       (%rax),%eax
  0.00       → callq        *0x32a59b(%rip)        # 36beb0 <_GLOBAL_OFFSET_TABLE_+0x1390>
  0.00         mov          %rax,0x18(%rsp)
               test         %rax,%rax
             ↓ jne          135
               mov          $0x8,%edi
               mov          %r13,%rsi
             → callq        *0x329f9b(%rip)        # 36b8c8 <_GLOBAL_OFFSET_TABLE_+0xda8>
             ↓ jmpq         5c5
        132:   xor          %r13d,%r13d
        135:   mov          0x18(%rsp),%r14
               mov          %r15,%rsi
               mov          %r13,%rdx
               mov          %r14,%rdi
             → callq        *0x329a7f(%rip)        # 36b3c8 <memcpy@GLIBC_2.14>
               mov          0x40(%rsp),%r13
               mov          %r14,0x108(%rsp)
               mov          %r13,0x110(%rsp)
               mov          %r13,0x118(%rsp)
               mov          0x38(%rsp),%rbx
               lea          0xc0(%rsp),%rdi
               mov          %r12,%rdx
               mov          %rbx,%rsi
             → callq        *0x3292d9(%rip)        # 36ac58 <_GLOBAL_OFFSET_TABLE_+0x138>
               vmovupd      0xc0(%rsp),%xmm0
               mov          0xd0(%rsp),%rax
               mov          0xe0(%rsp),%rsi
               mov          0x28(%rsp),%r14
  0.00         mov          0x20(%rsp),%r12
               mov          %rax,0x70(%rsp)
               vmovapd      %xmm0,0x60(%rsp)
               test         %rsi,%rsi
             ↓ je           1c5
               mov          0xd8(%rsp),%rdi
               mov          $0x1,%edx
             → callq        *0x3295fb(%rip)        # 36afc0 <_GLOBAL_OFFSET_TABLE_+0x4a0>
        1c5:   test         %rbp,%rbp
             ↓ je           4a9
               vmovsd       0x18(%rbx),%xmm0
  0.00         mov          0x10(%rbx),%rax
               mov          0x60(%rsp),%rcx
               xor          %r15d,%r15d
               mov          %rbp,0x88(%rsp)
               mov          %rax,0x90(%rsp)
               dec          %rax
               mov          %rcx,0x98(%rsp)
               shr          %rax
               mov          %rax,0xa0(%rsp)
               xor          %eax,%eax
               mov          %rax,0x10(%rsp)
               vmovsd       %xmm0,0xa8(%rsp)
             ↓ jmp          239
               nop            
        220:   mov          0x88(%rsp),%rbp
  0.00         mov          0x40(%rsp),%r13
               inc          %r15
               cmp          %rbp,%r15
             ↓ je           4b0
        239:   cmp          %r13,%r15
  0.00       ↓ je           582
  0.00         mov          0x18(%rsp),%rax
  0.00         mov          (%rax,%r15,8),%rax
  0.01         sub          0x90(%rsp),%rax
               mov          %rax,0x38(%rsp)
             ↑ je           220
  0.00         mov          %rbx,%rsi
               xor          %ebp,%ebp
             ↓ jmpq         301
               data16       data16 nopw %cs:0x0(%rax,%rax,1)
  0.01  270:   vmulsd       0xb0(%rsp),%xmm5,%xmm0
  0.00         vmovsd       0xb8(%rsp),%xmm1
  0.00         mov          0xa0(%rsp),%rax
  0.00         mov          0x8(%rsp),%r13
               lea          0x0(%rbp,%rax,1),%rcx
               mov          $0x1,%al
  0.05         mov          %r13,0xc0(%rsp)
  0.01         mov          %rbx,0xc8(%rsp)
               mov          %rbx,0xd0(%rsp)
  0.00         mov          %rax,0x10(%rsp)
               vmovsd       %xmm0,0xd8(%rsp)
               vmovsd       %xmm1,0xe0(%rsp)
  0.00         lea          0x120(%rsp),%rdi
  0.00         lea          0xc0(%rsp),%rsi
  0.04         mov          %r15,%rdx
  0.01         vzeroupper     
             → callq        motif_finder::waveform::Waveform::place_peak
  0.29         mov          0x98(%rsp),%rcx
  0.09         mov          %r13,%rdi
  0.00         mov          %rbx,%rsi
               mov          %rbx,0x30(%rsp)
  2.54  2f3:   inc          %rbp
  0.11         cmp          0x38(%rsp),%rbp
  0.16       ↑ je           220
  0.00  301:   mov          (%r14,%r15,8),%rax
  0.44         lea          motif_finder::THRESH,%rdx
  0.09         lea          0x0(%rbp,%rax,4),%rax
  0.21         vmovsd       (%rcx,%rax,8),%xmm0
  1.57         vucomisd     (%rdx),%xmm0
  2.31       ↑ jbe          2f3
  0.07         vmulsd       0xa8(%rsp),%xmm0,%xmm5
  1.72         vmovsd       0x30(%r12),%xmm2
  0.11         vmovsd       0x38(%r12),%xmm1
  0.00         mov          0x28(%r12),%rbx
  0.04         vmovsd       %xmm2,0xb0(%rsp)
  0.09         vmovsd       %xmm1,0xb8(%rsp)
  0.05         vmovapd      %xmm5,0x50(%rsp)
  0.01         test         %rbx,%rbx
  0.00       ↓ je           41d
               lea          __rust_no_alloc_shim_is_unstable,%rax
               mov          %rsi,0x48(%rsp)
               mov          0x18(%r12),%r14
  0.03         lea          0x0(,%rbx,8),%r12
  0.00         mov          %r15,%r13
  0.00         mov          %rdi,%r15
  0.04         mov          $0x8,%esi
  0.01         mov          %r12,%rdi
  0.00         movzbl       (%rax),%eax
  0.00       → callq        *0x32a327(%rip)        # 36beb0 <_GLOBAL_OFFSET_TABLE_+0x1390>
  0.00         test         %rax,%rax
  0.05       ↓ je           597
               cmp          $0x10,%rbx
             ↓ jb           433
               vmovapd      0x50(%rsp),%xmm5
  0.57         mov          0x20(%rsp),%r12
               mov          0x48(%rsp),%rsi
               mov          %rax,%rdx
               mov          %r15,%rdi
               mov          $0x0,%ecx
  0.00         mov          %r13,%r15
               sub          %r14,%rdx
               cmp          $0x80,%rdx
  0.05       ↓ jb           480
               mov          %rbx,%rcx
               vbroadcastsd %xmm5,%ymm0
  0.00         xor          %edx,%edx
               and          $0xfffffffffffffff0,%rcx
               nop            
        3e0:   vmulpd       (%r14,%rdx,8),%ymm0,%ymm1
 26.37         vmulpd       0x20(%r14,%rdx,8),%ymm0,%ymm2
  6.73         vmulpd       0x40(%r14,%rdx,8),%ymm0,%ymm3
 15.78         vmulpd       0x60(%r14,%rdx,8),%ymm0,%ymm4
  6.66         vmovupd      %ymm1,(%rax,%rdx,8)
  6.38         vmovupd      %ymm2,0x20(%rax,%rdx,8)
  7.65         vmovupd      %ymm3,0x40(%rax,%rdx,8)
  6.78         vmovupd      %ymm4,0x60(%rax,%rdx,8)
  9.81         add          $0x10,%rdx
  0.69         cmp          %rdx,%rcx
  0.91       ↑ jne          3e0
             ↓ jmp          48e
        41d:   mov          $0x8,%eax
               mov          %rax,0x8(%rsp)
               testb        $0x1,0x10(%rsp)
             ↓ jne          450
             ↑ jmpq         270
        433:   vmovapd      0x50(%rsp),%xmm5
               mov          0x20(%rsp),%r12
               mov          0x48(%rsp),%rsi
               mov          %r15,%rdi
               xor          %ecx,%ecx
               mov          %r13,%r15
             ↓ jmp          480
               nop            
  0.02  450:   test         %rsi,%rsi
  0.00       ↑ je           270
  0.00         shl          $0x3,%rsi
  0.01         mov          $0x8,%edx
               vzeroupper     
  0.00       → callq        *0x329355(%rip)        # 36afc0 <_GLOBAL_OFFSET_TABLE_+0x4a0>
  0.00         vmovapd      0x50(%rsp),%xmm5
  0.28       ↑ jmpq         270
               nop            
  0.00  480:   vmulsd       (%r14,%rcx,8),%xmm5,%xmm0
  0.44         vmovsd       %xmm0,(%rax,%rcx,8)
  0.28         inc          %rcx
  0.13  48e:   cmp          %rcx,%rbx
  0.04       ↑ jne          480
               mov          0x28(%rsp),%r14
  0.18         mov          %rax,0x8(%rsp)
  0.01         testb        $0x1,0x10(%rsp)
  0.05       ↑ jne          450
             ↑ jmpq         270
        4a9:   xor          %eax,%eax
               mov          %rax,0x10(%rsp)
        4b0:   vmovups      0x120(%rsp),%ymm0
  0.00         vmovups      0x140(%rsp),%ymm1
  0.00         vmovups      0x158(%rsp),%ymm2
               mov          0x80(%rsp),%rbx
               mov          0x68(%rsp),%rsi
               vmovups      %ymm2,0x38(%rbx)
  0.00         vmovups      %ymm1,0x20(%rbx)
               vmovups      %ymm0,(%rbx)
  0.00         test         %rsi,%rsi
             ↓ je           502
               mov          0x60(%rsp),%rdi
               shl          $0x3,%rsi
               mov          $0x8,%edx
               vzeroupper     
             → callq        *0x3292be(%rip)        # 36afc0 <_GLOBAL_OFFSET_TABLE_+0x4a0>
        502:   mov          0x10(%rsp),%r15
               test         %r13,%r13
             ↓ je           526
               mov          0x18(%rsp),%rdi
               shl          $0x3,%r13
               mov          $0x8,%edx
               mov          %r13,%rsi
               vzeroupper     
  0.00       → callq        *0x32929a(%rip)        # 36afc0 <_GLOBAL_OFFSET_TABLE_+0x4a0>
        526:   test         %rbp,%rbp
             ↓ je           543
               shl          $0x3,%rbp
               mov          $0x8,%edx
               mov          %r14,%rdi
               mov          %rbp,%rsi
               vzeroupper     
             → callq        *0x32927d(%rip)        # 36afc0 <_GLOBAL_OFFSET_TABLE_+0x4a0>
        543:   mov          0x30(%rsp),%rsi
               test         $0x1,%r15b
             ↓ je           56a
               test         %rsi,%rsi
             ↓ je           56a
               mov          0x8(%rsp),%rdi
               shl          $0x3,%rsi
               mov          $0x8,%edx
               vzeroupper     
  0.00       → callq        *0x329256(%rip)        # 36afc0 <_GLOBAL_OFFSET_TABLE_+0x4a0>
        56a:   mov          %rbx,%rax
               add          $0x178,%rsp
               pop          %rbx
               pop          %r12
  0.00         pop          %r13
  0.00         pop          %r14
  0.00         pop          %r15
               pop          %rbp
               vzeroupper     
             ← retq           
        582:   lea          anon.894356e293082f6e69db7a17e16fb2a4.45.llvm.5205908797324072370+0x138,%rdx
               mov          %r13,%rdi
               mov          %r13,%rsi
             → callq        *0x329683(%rip)        # 36b418 <_GLOBAL_OFFSET_TABLE_+0x8f8>
             ↓ jmp          5c5
        597:   mov          $0x8,%edi
               mov          %r12,%rsi
             → callq        *0x329b23(%rip)        # 36b8c8 <_GLOBAL_OFFSET_TABLE_+0xda8>
             ↓ jmp          5c5
        5a7: → callq        *0x328f63(%rip)        # 36ad10 <_GLOBAL_OFFSET_TABLE_+0x1f0>
             ↓ jmp          5c5
        5af: → callq        *0x328f5b(%rip)        # 36ad10 <_GLOBAL_OFFSET_TABLE_+0x1f0>
             ↓ jmp          5c5
        5b7:   mov          $0x8,%edi
               mov          %r13,%rsi
             → callq        *0x329b03(%rip)        # 36b8c8 <_GLOBAL_OFFSET_TABLE_+0xda8>
        5c5:   ud2            
               mov          %rax,%r14
               xor          %r15d,%r15d
             ↓ jmp          60f
               lea          0xf0(%rsp),%rdi
               mov          %rax,%r14
             → callq        core::ptr::drop_in_place<alloc::vec::Vec<motif_finder::base::Bp>>
             ↓ jmp          63a
               mov          %rax,%r14
             ↓ jmp          63a
             ↓ jmp          5f3
               mov          %rax,%r14
               mov          $0x1,%r15b
               mov          %r13,%r12
             ↓ jmp          605
        5f3:   mov          0x30(%rsp),%rbx
               mov          0x10(%rsp),%r15
               mov          0x8(%rsp),%r12
               mov          %rax,%r14
        605:   lea          0x60(%rsp),%rdi
             → callq        core::ptr::drop_in_place<alloc::vec::Vec<motif_finder::base::Bp>>
        60f:   lea          0x108(%rsp),%rdi
             → callq        core::ptr::drop_in_place<alloc::vec::Vec<motif_finder::base::Bp>>
               lea          0xf0(%rsp),%rdi
             → callq        core::ptr::drop_in_place<alloc::vec::Vec<motif_finder::base::Bp>>
               test         $0x1,%r15b
             ↓ je           63a
               mov          %r12,%rdi
               mov          %rbx,%rsi
             → callq        core::ptr::drop_in_place<motif_finder::waveform::Kernel>
        63a:   lea          0x120(%rsp),%rdi
             → callq        core::ptr::drop_in_place<motif_finder::waveform::Waveform>
               mov          %r14,%rdi
             → callq        _Unwind_Resume@plt
               ud2            
