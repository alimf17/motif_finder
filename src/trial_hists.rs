use plotters::prelude::*;
//use num::*;
use plotters::coord::types::RangedSlice;

fn main() {

    let trial_data: Vec<f64> = vec![1.034449, 0.6260989, 0.6176688, 1.310866, -0.7008287, 0.1614868, 0.09371634, -1.786494, 0.6488053, -0.2811066, -0.6272425, 0.954983, 0.7499168, -0.5522692, -0.4015437, -0.3965766, -0.3799749, 0.6405716, 0.1475576, 1.68378, -1.015546, 0.1670575, 1.887531, -1.715074, 0.9875757, -1.39705, -0.2251377, -1.059881, 1.584563, -0.2921572, 0.8044256, -0.3313034, -0.4504762, -0.5104171, 0.858756, -1.431237, -0.6374362, -0.6192767, 0.5821541, -0.1764737, 0.4460948, -0.3129101, -0.3428762, 0.6793286, -0.4385052, -0.8961638, -1.975444, 0.2679699, -1.089409, -1.160079, 0.4683426, 0.9334177, 0.629652, 0.1758726, -0.5537124, -0.4774523, -1.528146, 0.102978, 0.8454189, -0.6036226, 0.7104966, 0.1820106, -0.02968889, 1.634835, -0.1859041, 1.240721, 1.260108, 0.03274067, 0.6952985, 0.2319895, -1.070125, -0.1106547, 1.862092, 0.7073415, 0.2527218, 0.6852442, -0.6435671, -0.9245757, -0.6227547, -0.3005532, -1.230177, 0.6734212, 0.4202964, 0.5902002, -1.502398, 0.6045462, 0.3976146, -1.95654, 0.8294797, 0.8274536, 1.262403, -0.02069547, -0.6211462, -1.380278, 0.2183964, -2.022511, 1.122117, -0.1589425, 2.513711, -0.6657197, -0.2261701, 0.9037082, 1.377614, -0.1675941, -0.09956302, -1.260884, -0.1694052, -1.513932, -0.468235, 0.09816977, -0.07985934, 0.9051044, 1.747176, -1.45248, -1.295218, -1.524874, -1.080428, 0.8669732, 1.929909, -0.2414433, -1.523841, -0.8468195, -0.5602731, -1.040808, -1.057539, 1.012985, -1.717055, 1.648235, -0.519977, -1.403283, -1.730612, -0.7123786, 0.1574234, -1.198229, 0.5359113, 1.023356, -0.4007349, -0.1541284, 0.3193252, 0.5388817, 1.193192, 0.1517367, 0.819706, 0.01538328, -1.346683, 0.3169234, -0.2588699, 1.178243, 0.6034141, -0.04754076, 0.8846536, -0.9782952, -0.1709022, 0.1721791, 0.2975135, 0.9331867, 0.1941037, -0.8711528, -0.4267147, -1.335668, -1.19744, 1.302623, 0.02185883, 1.949609, -0.1211342, 0.7250167, 0.8549562, 0.5224421, 0.6898274, 0.07508084, 0.7925878, -0.5803181, -0.3097116, 0.3507943, -2.104722, -1.333233, -0.2091464, -1.9163, -0.4470675, 0.4329179, 0.6083737, -0.6320401, 0.4923904, 1.870335, 2.241478, 2.05668, 0.7930754, 1.628664, 0.3927238, 0.0274487, 1.641756, -1.93339, -2.337307, -0.8211513, -1.620018, -1.78223, -0.3586413, 1.593016, -0.05799138, 0.7520389, 1.023861, 0.7551868, -1.009979, 1.470469, 1.785344, 0.6451817, 1.300025, 1.665973, 0.6972299, 1.102249, 1.169894, -1.498519, 0.5792602, 0.3120541, -0.04939029, -0.5746129, 0.3920882, -0.07996684, 1.436616, 0.5128928, -1.056377, -0.06052572, -0.7167738, -0.217321, 0.3967037, -0.3489772, 0.2713763, -0.3701261, 0.5449779, -0.08307019, 0.4309383, 1.344848, 1.755621, 0.5421822, -1.232553, -0.647158, -0.2985795, -1.5004, -1.527431, -0.08647568, 0.7773863, 1.754883, 0.5876885, 1.455469, 1.003856, -0.558199, -0.1904222, 0.9949068, -0.3244782, 1.474488, -0.00945977, -1.848301, -0.2778871, -0.08054104, 1.003639, 0.04432509, -0.1511364, -1.518433, -0.4907334, -0.2234552, -0.0730997, -0.7037274, 1.975455, 0.190529, -0.9313077, -0.4049736, -0.8734073, -1.395841, 1.067538, 0.957181, -0.3659914, -2.261245, 1.763144, -0.1812362, 0.1866229, 0.54533, 0.7137767, 1.44787, 0.3055554, -0.135697, -0.472464, 0.217916, -0.4711516, 0.0265683, -1.041537, 1.860493, -0.2826569, -0.4376055, -1.30081, -0.1760246, -0.3173306, 0.695241, 1.436878, 1.652689, 0.678887, -0.1956859, 0.2211943, 1.491826, -1.992142, -0.1990552, 1.181709, 0.3216028, -0.5091326, -0.9837055, -2.189553, 0.362317, -0.8478351, 0.5877629, -0.03597393, -0.4785398, -0.07165303, 0.09550344, 0.0135927, -3.536275, 2.386464, -1.028713, 0.4349266, 0.2448667, 2.361411, -0.08150488, 0.5246741, -0.2584679, -0.6536803, -0.4364965, -0.5060987, -0.02631034, -1.967843, 0.7141438, -0.1927337, 0.954651, -0.146795, 0.4426367, 1.624797, -1.228254, 0.3873812, 0.7824479, 0.2492178, -0.06819023, -1.832621, 0.999392, 1.568642, -1.217114, 0.7266463, -0.6781669, 0.4181462, -1.282189, -0.7662197, 1.296152, 1.132041, -0.412689, -0.699128, 0.67532, 1.058827, -2.811843, -0.1094332, -0.3978132, -1.568067, 0.005622781, 1.305464, 1.280992, 0.1553325, 1.73609, -0.3265911, 1.033801, -1.755823, 1.091542, -0.101145, 0.02132352, -0.9607171, 0.7464666, -0.4004306, -0.9252256, 1.684107, 1.473867, -0.9564712, -0.07267112, 0.5212349, 0.6917745, 0.4894453, -0.7494632, 0.01502677, -1.226589, -0.2400488, -0.0232819, 0.9277333, -1.887963, -0.1301378, -0.9308352, -0.2562079, 0.7798489, 0.3182903, 0.4642309, -1.679453, 0.2233099, 1.464408, 0.6007661, -0.4053991, -0.9457014, 0.6054536, -0.01702375, 0.7179153, 0.1262651, 0.6555735, -0.3326021, 0.610688, -1.292026, 0.8135284, 0.1365857, -0.9816777, -2.154844, 0.2504974, 0.6854037, -1.08922, 0.9486867, 0.4407898, 1.062502, -0.403046, -0.5050941, -3.06628, -1.608322, -0.4556166, 1.363115, 1.326682, -0.3368679, -0.9195362, -0.4058153, -0.6343162, -0.6728392, 0.2364547, -1.772619, -0.714092, -0.03881733, -0.2795788, 1.188252, -0.3195663, 1.838695, 0.07717247, 0.6682945, 0.155884, 0.3369836, -1.16505, -0.4100851, 1.054054, -1.687608, -0.6421581, -2.169847, -0.1227908, 0.3531728, -0.1606377, 0.1249764, -0.9942391, 0.6488009, 0.4747059, 0.1086062, -0.131504, -0.1708762, -0.2174615, -0.1959458, -0.3013455, 0.9994354, 1.114885, -0.348458, -0.3178413, -1.211074, 1.229313, 1.32106, 1.335712, -1.271046, 0.04918762, 1.405921, 0.04486608, -0.9785918, 0.04207631, 0.1522199, 0.05269572, -1.550102, 1.413779, -0.2130829, 0.9605798, -0.7150023, -0.09375117, 1.399908, -2.119703, -0.9164211, -1.027374, -0.1173594, -1.160359, -1.346357, -0.9993249, 1.911489, 1.93194, 0.5778596, -0.04208812, 0.6618079, -0.3696032, -0.8642959, -1.032508, 1.350296, -0.7398985, -0.3044762, -1.135987, 1.050058, -0.7556349, 0.2429131, 1.377243, 0.5246972, -0.1249287, -0.07581786, -1.050685, -1.810063, 0.2843003, -1.311553, -1.267551, 0.2240672, -0.103175, 0.2644894, -0.7820886, 1.947027, 0.3594636, 2.777377, -0.9111077, 0.1391137, -0.6106362, -0.4040495, 0.1515709, 0.4231673, 0.4177351, 0.9631471, -0.4250228, -1.121503, -0.3075378, 0.9767947, -1.036867, 0.7251668, -0.269256, 1.113584, -0.0275374, -0.6143042, 0.7683128, -0.01913925, -1.666317, 1.197223, -0.9933674, -1.339403, -0.03527627, 0.04088312, 0.4537004, -0.8468668, -1.373439, -0.9067905, 0.3228677, -0.2805801, -0.7142798, -1.009623, 1.189988, 1.177131, -0.4969437, -0.2154352, 1.345783, 0.3113676, 0.9521854, 0.2506412, -0.9140948, 0.4082733, -1.633406, 1.477418, 0.07032528, 0.0754573, 0.2284155, -0.9210276, -0.5036967, -2.021818, 0.04478629, 0.8264288, -1.537402, 0.3774158, -1.624411, -0.7284272, 1.793381, 0.6231557, 0.4764776, -2.35369, -0.05571125, -0.1009542, -0.6733234, -0.636492, -0.5483484, 0.1492166, 0.509265, -1.02342, 1.084871, 0.3708584, -0.8265012, -0.3329736, -0.7730432, 0.5124998, -1.502661, -2.354933, 0.2808072, -0.4166758, 1.637361, 2.049271, -0.6702927, -0.08764409, 1.66896, 0.018158, -1.069917, -2.125883, -0.8343317, 0.3877106, -1.589306, 1.692221, -1.373131, -1.152211, 0.04042812, -0.05903232, -0.1107845, 0.8826654, -0.5286138, 0.2324514, 1.34477, 0.7992232, -1.622718, 0.7657449, -1.503907, 1.494163, -0.9725623, -0.6543381, -1.410681, -0.7393383, -1.378926, -1.360547, 1.110063, 0.05703138, 2.109605, 0.1430631, 0.2477453, 0.7106578, -0.8700893, -1.232409, -1.76247, -1.023721, -0.473656, -0.5271422, 0.04760667, -0.01199497, 0.1629247, 1.570892, 0.07967669, -0.1891709, -1.809437, -0.07144238, 1.23182, -1.046709, 0.6063978, -0.9319347, 0.8904794, -1.430252, -0.4937725, 0.5600207, -0.126676, -0.8028243, 0.5262976, 0.440594, -1.999861, -0.5833162, 0.2064237, 0.325493, 1.63214, -0.24892, 0.6667039, -0.7900773, -0.4925768, -0.6499382, 0.6070899, -0.05921883, -0.6587938, -0.04188845, 1.283126, -0.05680641, 0.02713533, -0.874943, -0.2564625, -1.902708, 0.7568096, -0.8291153, 1.770367, -0.8085895, 0.09457092, 0.9340872, 0.3417938, 0.5246115, -0.614933, 0.5700696, -0.609964, 2.453118, -1.118493, -1.211155, 0.7405414, 0.6137314, 0.8501259, -0.5111822, -0.2014611, -1.686892, -0.3282551, -0.03035723, 0.9870344, 0.2304282, -1.244375, -0.4790922, 2.381892, 1.063198, -1.585272, -0.2436807, 0.2027886, 0.1218003, -0.9720849, -0.5461489, 0.6139667, 0.3184835, 0.1008932, 1.531585, 0.01461259, -0.05102062, 0.1737741, -0.3064687, -1.797264, -0.1008954, 1.263703, 0.02443467, 0.3970618, -0.5802755, -0.9367268, 1.726536, 1.52401, -0.5117893, -0.7652154, 0.2104527, 2.053841, -0.9177062, 1.154372, 0.7505895, -0.6939706, -0.8171875, -0.8619978, 0.1247795, 0.6032095, 1.401934, 0.281931, 1.261778, -1.362081, 0.6537602, 0.8142926, 0.8723089, 1.60887, -0.8883466, -0.7616927, -0.9172471, -0.8945991, 2.322468, 2.044563, -0.2555102, -0.4082503, 1.342454, 1.464241, 0.003785441, -0.1941755, -1.145188, 0.3830059, -0.1063246, 1.804666, 0.7909872, -0.5559893, 0.1331596, -0.9907647, 0.3735802, 0.0594708, -0.700913, 2.781918, 1.364547, -0.850709, -0.9305353, 0.7522952, -0.8071775, 0.2160799, -0.4402711, -0.2631275, 2.971584, -0.2988525, 0.06480829, 0.1331872, -0.5932765, -0.1134021, 1.197593, -0.6282431, 1.076295, 0.1166276, 0.9420143, 2.372109, -0.806402, -1.275599, 0.8088199, -0.4984251, 1.760377, -1.228224, -0.7286434, 0.777874, 1.713888, 0.3221933, -0.2569717, 1.882771, -1.592799, 1.683237, -0.4486628, -1.581902, -1.586871, -0.5359102, -1.557321, -1.207287, -0.9987689, -0.8016847, 0.1647564, 1.254389, 1.028026, 0.2194386, 0.6585267, 2.592207, -0.4331522, -0.4424429, 0.7895149, -0.985536, 1.496134, -2.307079, 0.5939027, -0.2189256, 1.769214, -0.1138128, -0.3585525, 1.151462, -0.7557202, 0.7794038, 0.9101054, 0.7413927, 0.1347128, 2.045815, 0.09531785, 0.1465173, 0.3759348, 0.1750399, 0.09734504, -1.062802, -1.934081, -1.409444, 0.525726, -1.664824, -1.122951, 1.080801, 1.191458, 0.9638685, -1.870777, -1.679091, 0.2654574, 0.9434652, 1.265899, 0.1350963, 0.4996119, 0.3359929, -0.9551951, -0.9112257, 0.5558905, -0.3276335, -0.1156612, -0.4734368, 0.09788223, 0.5706874, -1.671012, 0.3434648, 1.256034, 0.6032491, 0.4057429, 1.37818, -0.5843538, 0.4212066, -1.035987, 0.087313, 1.410093, 1.820805, -0.03951536, 0.3538208, -2.313445, 1.648426, 1.276928, 0.3908343, 1.04048, -0.1457211, -1.725279, -0.1261768, -0.9341474, -1.151106, 0.3532733, 0.5812382, 0.08866255, 0.7847301, 0.7405627, -0.7738749, 1.701132, 1.746269, -0.5009338, 0.6140309, 1.197249, 0.1571788, -0.07774642, 0.2548231, -0.342593, -1.27511, 0.5363864, 1.241747, -1.569528, -1.088282, 1.755208, 0.1864527, -0.2919751, -0.01971241, -2.73704, 0.4323257, 1.046456, -0.340249, 0.568657, -0.6563099, -0.340549, -0.5880496, 2.975598, -0.4834608, -1.179709, -0.6717056, -0.3967005, 1.741029, -0.1110502, -2.949955, 0.6706251, 0.2440017, -1.919627, -0.006284467, -0.02555652, -0.868844, -0.04817677, -0.04294195, 0.9991927, -0.7774445, 1.765478, -0.2526418, -0.2816062, -0.9318034, 0.6271676, 1.620899, 0.7688712, 0.7196588, -0.4753003, 1.918217, 0.8783584, 1.464714, 0.2107447, 1.191051, 0.8190195, -0.5402063, 0.01810075, 1.207703, -1.977507, 1.326603, 0.7793771, 1.196822, -1.480466, 0.3103931, 0.9372201, -1.460256, 2.145348, 0.05044529, 0.3739604, 1.540793, -0.9649239, -0.7283506, 1.941833, -1.172917, -1.194244, 0.04630711, -0.07629919, -0.5149371, 0.8308462, -0.2698577, -0.0533912, -0.1220683, -1.450704, -0.5085745, -0.5133591, 1.069272, 1.090992, 0.2094227, 0.3390453, 0.4453262, 0.2336696];

    let plotting = BitMapBackend::new("Many_Panel_Hists.png", (5000, 3000)).into_drawing_area();

    plotting.fill(&WHITE).expect("This should just work");

    let (left, right) = plotting.split_horizontally((50).percent_width());

    let lchart = ChartBuilder::on(&left).margin(30).caption("Accepted Moves", ("sans-serif", 20));
    let rchart = ChartBuilder::on(&left).margin(30).caption("All Moves", ("sans-serif", 20));

    let left_subs = left.split_evenly((2,2));
    let right_subs = right.split_evenly((2,2));

    //trial_data

    //let min = trial_data.iter().fold(f64::INFINITY, |a, &b| a.min(b));
    //let max = trial_data.iter().fold(-f64::INFINITY, |a, &b| a.max(b));

    static num_bins: usize = 40;

    //let step = (max-min)/f64::from(num_bins);

    //let ranged = (0..num_bins).map(|i| min+f64::from(i)*step).collect::<Vec<_>>();
 
    //let ranged = range_step(min, max, step);
    //let range = RangedSlice::from(ranged.as_slice());
    //let inverse_size = 1./(trial_data.len() as f64);

    let (ranged, hist_form) = build_hist_bins(trial_data.clone(), num_bins);

    let max_prob = hist_form.iter().map(|&x| x.1).fold(0_f64, |x,y| x.max(y));

    let range = RangedSlice::from(ranged.as_slice());


/*
    for area in left_subs.iter() {

        let mut hist = ChartBuilder::on(area);

        hist.margin(5).set_left_and_bottom_label_area_size(20);

        let mut hist_context = hist.build_cartesian_2d(range.clone().into_segemented(), 0_f64..100_f64).unwrap();

        hist_context.configure_mesh().draw().unwrap();

        //hist_context.draw_series((&Histogram::vertical(&hist_context).style(CYAN.filled())).data(trial_data.iter().map(|x| (x, inverse_size)))).unwrap();
        hist_context.draw_series((&Histogram::vertical(&hist_context).style(CYAN.filled())).data(trial_data.iter().map(|x| (x, 1.)))).unwrap();
    }
*/

    let labs = ["Occupancy Signal RMSE between moves", "Finite Likelihood differences", "Euclidean distance of heights", "Total distance of all PWMs"];

    let mut j = 0;
    for area in left_subs.iter() {

        let mut hist = ChartBuilder::on(area);

        hist.margin(10).set_left_and_bottom_label_area_size(20);

        hist.caption(labs[j], ("sans-serif", 10));

        j+=1;

        let mut hist_context = hist.build_cartesian_2d(range.clone(), 0_f64..max_prob).unwrap();

        hist_context.configure_mesh().disable_x_mesh().disable_y_mesh().x_label_formatter(&|x| format!("{:.02}", *x)).draw().unwrap();

        //hist_context.draw_series(Histogram::vertical(&hist_context).style(CYAN.filled()).data(trial_data.iter().map(|x| (x, inverse_size)))).unwrap();
        hist_context.draw_series(Histogram::vertical(&hist_context).style(CYAN.filled()).margin(0).data(hist_form.iter().map(|x| (&x.0, x.1)))).unwrap();
    }
    let mut j = 0;
    for area in right_subs.iter() {

        let mut hist = ChartBuilder::on(area);

        hist.margin(10).set_left_and_bottom_label_area_size(20);
        
        hist.caption(labs[j], ("sans-serif", 10));

        j+=1;

        let mut hist_context = hist.build_cartesian_2d(range.clone(), 0_f64..max_prob).unwrap();

        hist_context.configure_mesh().disable_x_mesh().disable_y_mesh().x_label_formatter(&|x| format!("{:.02}", *x)).draw().unwrap();

        //hist_context.draw_series(Histogram::vertical(&hist_context).style(CYAN.filled()).data(trial_data.iter().map(|x| (x, inverse_size)))).unwrap();
        hist_context.draw_series(Histogram::vertical(&hist_context).style(CYAN.filled()).margin(0).data(hist_form.iter().map(|x| (&x.0, x.1)))).unwrap();
    }





}

fn build_hist_bins(mut data: Vec<f64>, num_bins: usize) -> (Vec<f64>, Vec<(f64, f64)>){

    let length = data.len() as f64;

    data.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());

    let min = data[0];
    let max = *data.last().unwrap();

    let step = (max-min)/(num_bins as f64);

    let add_into = 1./length;

    let xs = (0..num_bins).map(|i| (min+(i as f64)*step)).collect::<Vec<_>>();

    let mut bins: Vec<(f64, f64)> = (0..num_bins).map(|i| (xs[i], 0.0)).collect();

    let mut j: usize = 1;

    for &dat in data.iter() {

        //Because data and bins are sorted, we only need to find the first bin
        //where the data is less than the top end. We use short circuit && to prevent overflow 
        while (j < (bins.len()-1)) && (dat >= bins[j+1].0) { j+= 1;}
        bins[j].1 += add_into;
    }

    (xs, bins)

}








