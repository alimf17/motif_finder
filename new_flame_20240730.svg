<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="1362587303"><g><title>_start (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="805" width="0.8142%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="789" width="0.8142%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="773" width="0.8142%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="757" width="0.8142%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="741" width="0.8142%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="725" width="0.8142%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="709" width="0.8142%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="693" width="0.8142%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (11,093,746 samples, 0.81%)</title><rect x="0.0000%" y="677" width="0.8142%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="11093746"/><text x="0.2500%" y="687.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (10,173,917 samples, 0.75%)</title><rect x="2.8072%" y="549" width="0.7467%" height="15" fill="rgb(220,122,19)" fg:x="38250680" fg:w="10173917"/><text x="3.0572%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10,167,118 samples, 0.75%)</title><rect x="3.5539%" y="549" width="0.7462%" height="15" fill="rgb(250,228,42)" fg:x="48424597" fg:w="10167118"/><text x="3.8039%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10,167,118 samples, 0.75%)</title><rect x="3.5539%" y="533" width="0.7462%" height="15" fill="rgb(240,193,28)" fg:x="48424597" fg:w="10167118"/><text x="3.8039%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6,771,125 samples, 0.50%)</title><rect x="3.8031%" y="517" width="0.4969%" height="15" fill="rgb(216,20,37)" fg:x="51820590" fg:w="6771125"/><text x="4.0531%" y="527.50"></text></g><g><title>core::ptr::write (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="549" width="0.2492%" height="15" fill="rgb(206,188,39)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="559.50"></text></g><g><title>[unknown] (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="533" width="0.2492%" height="15" fill="rgb(217,207,13)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="543.50"></text></g><g><title>[unknown] (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="517" width="0.2492%" height="15" fill="rgb(231,73,38)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="527.50"></text></g><g><title>[unknown] (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="501" width="0.2492%" height="15" fill="rgb(225,20,46)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="511.50"></text></g><g><title>[unknown] (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="485" width="0.2492%" height="15" fill="rgb(210,31,41)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="495.50"></text></g><g><title>[unknown] (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="469" width="0.2492%" height="15" fill="rgb(221,200,47)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="479.50"></text></g><g><title>[unknown] (3,395,050 samples, 0.25%)</title><rect x="4.3000%" y="453" width="0.2492%" height="15" fill="rgb(226,26,5)" fg:x="58591715" fg:w="3395050"/><text x="4.5500%" y="463.50"></text></g><g><title>?? (37,290,738 samples, 2.74%)</title><rect x="2.8072%" y="565" width="2.7368%" height="15" fill="rgb(249,33,26)" fg:x="38250680" fg:w="37290738"/><text x="3.0572%" y="575.50">??</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (13,554,653 samples, 0.99%)</title><rect x="4.5492%" y="549" width="0.9948%" height="15" fill="rgb(235,183,28)" fg:x="61986765" fg:w="13554653"/><text x="4.7992%" y="559.50"></text></g><g><title>alloc::vec::from_elem (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="565" width="0.2440%" height="15" fill="rgb(221,5,38)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="575.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="549" width="0.2440%" height="15" fill="rgb(247,18,42)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="559.50"></text></g><g><title>?? (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="533" width="0.2440%" height="15" fill="rgb(241,131,45)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="543.50"></text></g><g><title>core::ptr::write (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="517" width="0.2440%" height="15" fill="rgb(249,31,29)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="527.50"></text></g><g><title>__memset_avx2_unaligned_erms (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="501" width="0.2440%" height="15" fill="rgb(225,111,53)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="511.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="485" width="0.2440%" height="15" fill="rgb(238,160,17)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="495.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="469" width="0.2440%" height="15" fill="rgb(214,148,48)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="479.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="453" width="0.2440%" height="15" fill="rgb(232,36,49)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="463.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="437" width="0.2440%" height="15" fill="rgb(209,103,24)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="447.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="421" width="0.2440%" height="15" fill="rgb(229,88,8)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="431.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="405" width="0.2440%" height="15" fill="rgb(213,181,19)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="415.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="389" width="0.2440%" height="15" fill="rgb(254,191,54)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="399.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="373" width="0.2440%" height="15" fill="rgb(241,83,37)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="383.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="357" width="0.2440%" height="15" fill="rgb(233,36,39)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="367.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="341" width="0.2440%" height="15" fill="rgb(226,3,54)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="351.50"></text></g><g><title>[unknown] (3,324,332 samples, 0.24%)</title><rect x="5.5440%" y="325" width="0.2440%" height="15" fill="rgb(245,192,40)" fg:x="75541418" fg:w="3324332"/><text x="5.7940%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="757" width="15.6758%" height="15" fill="rgb(238,167,29)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="767.50">core::iter::traits::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="741" width="15.6758%" height="15" fill="rgb(232,182,51)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="725" width="15.6758%" height="15" fill="rgb(231,60,39)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="735.50">alloc::vec::in_place_col..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="709" width="15.6758%" height="15" fill="rgb(208,69,12)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="693" width="15.6758%" height="15" fill="rgb(235,93,37)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="703.50">&lt;alloc::vec::Vec&lt;T,A&gt; as..</text></g><g><title>?? (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="677" width="15.6758%" height="15" fill="rgb(213,116,39)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="687.50">??</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="661" width="15.6758%" height="15" fill="rgb(222,207,29)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="671.50">core::iter::traits::iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="645" width="15.6758%" height="15" fill="rgb(206,96,30)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="655.50">&lt;core::iter::adapters::m..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="629" width="15.6758%" height="15" fill="rgb(218,138,4)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="639.50">core::iter::traits::iter..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="613" width="15.6758%" height="15" fill="rgb(250,191,14)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="623.50">core::iter::adapters::ma..</text></g><g><title>motif_finder::base::MotifSet::rand_with_one::_{{closure}} (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="597" width="15.6758%" height="15" fill="rgb(239,60,40)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="607.50">motif_finder::base::Moti..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (213,597,065 samples, 15.68%)</title><rect x="0.8142%" y="581" width="15.6758%" height="15" fill="rgb(206,27,48)" fg:x="11093746" fg:w="213597065"/><text x="1.0642%" y="591.50">motif_finder::base::Moti..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (145,825,061 samples, 10.70%)</title><rect x="5.7879%" y="565" width="10.7021%" height="15" fill="rgb(225,35,8)" fg:x="78865750" fg:w="145825061"/><text x="6.0379%" y="575.50">motif_finder::ba..</text></g><g><title>?? (220,382,320 samples, 16.17%)</title><rect x="0.8142%" y="773" width="16.1738%" height="15" fill="rgb(250,213,24)" fg:x="11093746" fg:w="220382320"/><text x="1.0642%" y="783.50">??</text></g><g><title>metropolis::main (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="757" width="0.4980%" height="15" fill="rgb(247,123,22)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="767.50"></text></g><g><title>motif_finder::base::MotifSet::ln_likelihood (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="741" width="0.4980%" height="15" fill="rgb(231,138,38)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="751.50"></text></g><g><title>?? (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="725" width="0.4980%" height="15" fill="rgb(231,145,46)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="735.50"></text></g><g><title>&lt;motif_finder::modified_t::BackgroundDist as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="709" width="0.4980%" height="15" fill="rgb(251,118,11)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="719.50"></text></g><g><title>&lt;motif_finder::modified_t::FastT as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="693" width="0.4980%" height="15" fill="rgb(217,147,25)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="703.50"></text></g><g><title>?? (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="677" width="0.4980%" height="15" fill="rgb(247,81,37)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="687.50"></text></g><g><title>motif_finder::modified_t::bpser (6,785,255 samples, 0.50%)</title><rect x="16.4900%" y="661" width="0.4980%" height="15" fill="rgb(209,12,38)" fg:x="224690811" fg:w="6785255"/><text x="16.7400%" y="671.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (3,394,216 samples, 0.25%)</title><rect x="16.7389%" y="645" width="0.2491%" height="15" fill="rgb(227,1,9)" fg:x="228081850" fg:w="3394216"/><text x="16.9889%" y="655.50"></text></g><g><title>std::sys::log_wrapper (3,394,216 samples, 0.25%)</title><rect x="16.7389%" y="629" width="0.2491%" height="15" fill="rgb(248,47,43)" fg:x="228081850" fg:w="3394216"/><text x="16.9889%" y="639.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (3,394,216 samples, 0.25%)</title><rect x="16.7389%" y="613" width="0.2491%" height="15" fill="rgb(221,10,30)" fg:x="228081850" fg:w="3394216"/><text x="16.9889%" y="623.50"></text></g><g><title>[libm-2.28.so] (3,394,216 samples, 0.25%)</title><rect x="16.7389%" y="597" width="0.2491%" height="15" fill="rgb(210,229,1)" fg:x="228081850" fg:w="3394216"/><text x="16.9889%" y="607.50"></text></g><g><title>&lt;&amp;motif_finder::waveform::Kernel as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (3,301,888 samples, 0.24%)</title><rect x="16.9880%" y="741" width="0.2423%" height="15" fill="rgb(222,148,37)" fg:x="231476066" fg:w="3301888"/><text x="17.2380%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,301,888 samples, 0.24%)</title><rect x="16.9880%" y="725" width="0.2423%" height="15" fill="rgb(234,67,33)" fg:x="231476066" fg:w="3301888"/><text x="17.2380%" y="735.50"></text></g><g><title>?? (3,320,666 samples, 0.24%)</title><rect x="17.2303%" y="725" width="0.2437%" height="15" fill="rgb(247,98,35)" fg:x="234777954" fg:w="3320666"/><text x="17.4803%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,320,666 samples, 0.24%)</title><rect x="17.2303%" y="709" width="0.2437%" height="15" fill="rgb(247,138,52)" fg:x="234777954" fg:w="3320666"/><text x="17.4803%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,320,666 samples, 0.24%)</title><rect x="17.2303%" y="693" width="0.2437%" height="15" fill="rgb(213,79,30)" fg:x="234777954" fg:w="3320666"/><text x="17.4803%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,320,666 samples, 0.24%)</title><rect x="17.2303%" y="677" width="0.2437%" height="15" fill="rgb(246,177,23)" fg:x="234777954" fg:w="3320666"/><text x="17.4803%" y="687.50"></text></g><g><title>?? (230,286,100 samples, 16.90%)</title><rect x="0.8142%" y="789" width="16.9006%" height="15" fill="rgb(230,62,27)" fg:x="11093746" fg:w="230286100"/><text x="1.0642%" y="799.50">??</text></g><g><title>metropolis::main (9,903,780 samples, 0.73%)</title><rect x="16.9880%" y="773" width="0.7268%" height="15" fill="rgb(216,154,8)" fg:x="231476066" fg:w="9903780"/><text x="17.2380%" y="783.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (9,903,780 samples, 0.73%)</title><rect x="16.9880%" y="757" width="0.7268%" height="15" fill="rgb(244,35,45)" fg:x="231476066" fg:w="9903780"/><text x="17.2380%" y="767.50"></text></g><g><title>?? (6,601,892 samples, 0.48%)</title><rect x="17.2303%" y="741" width="0.4845%" height="15" fill="rgb(251,115,12)" fg:x="234777954" fg:w="6601892"/><text x="17.4803%" y="751.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (3,281,226 samples, 0.24%)</title><rect x="17.4740%" y="725" width="0.2408%" height="15" fill="rgb(240,54,50)" fg:x="238098620" fg:w="3281226"/><text x="17.7240%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u64&gt;: 13]&gt; (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="757" width="0.2494%" height="15" fill="rgb(233,84,52)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="741" width="0.2494%" height="15" fill="rgb(207,117,47)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="725" width="0.2494%" height="15" fill="rgb(249,43,39)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="709" width="0.2494%" height="15" fill="rgb(209,38,44)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="693" width="0.2494%" height="15" fill="rgb(236,212,23)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="677" width="0.2494%" height="15" fill="rgb(242,79,21)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="687.50"></text></g><g><title>__rdl_dealloc (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="661" width="0.2494%" height="15" fill="rgb(211,96,35)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="645" width="0.2494%" height="15" fill="rgb(253,215,40)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="655.50"></text></g><g><title>__GI_munmap (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="629" width="0.2494%" height="15" fill="rgb(211,81,21)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="639.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="613" width="0.2494%" height="15" fill="rgb(208,190,38)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="623.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="597" width="0.2494%" height="15" fill="rgb(235,213,38)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="607.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="581" width="0.2494%" height="15" fill="rgb(237,122,38)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="591.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="565" width="0.2494%" height="15" fill="rgb(244,218,35)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="575.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="549" width="0.2494%" height="15" fill="rgb(240,68,47)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="559.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="533" width="0.2494%" height="15" fill="rgb(210,16,53)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="543.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="517" width="0.2494%" height="15" fill="rgb(235,124,12)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="527.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="501" width="0.2494%" height="15" fill="rgb(224,169,11)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="511.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="485" width="0.2494%" height="15" fill="rgb(250,166,2)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="495.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="469" width="0.2494%" height="15" fill="rgb(242,216,29)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="479.50"></text></g><g><title>[unknown] (3,397,661 samples, 0.25%)</title><rect x="17.7148%" y="453" width="0.2494%" height="15" fill="rgb(230,116,27)" fg:x="241379846" fg:w="3397661"/><text x="17.9648%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;motif_finder::data_struct::AllData&gt; (6,791,067 samples, 0.50%)</title><rect x="17.7148%" y="789" width="0.4984%" height="15" fill="rgb(228,99,48)" fg:x="241379846" fg:w="6791067"/><text x="17.9648%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;motif_finder::sequence::Sequence&gt; (6,791,067 samples, 0.50%)</title><rect x="17.7148%" y="773" width="0.4984%" height="15" fill="rgb(253,11,6)" fg:x="241379846" fg:w="6791067"/><text x="17.9648%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::collections::hash::map::HashMap&lt;u64,usize&gt;&gt;&gt; (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="757" width="0.2490%" height="15" fill="rgb(247,143,39)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="741" width="0.2490%" height="15" fill="rgb(236,97,10)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::map::HashMap&lt;u64,usize&gt;]&gt; (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="725" width="0.2490%" height="15" fill="rgb(233,208,19)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,usize&gt;&gt; (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="709" width="0.2490%" height="15" fill="rgb(216,164,2)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,usize,std::collections::hash::map::RandomState&gt;&gt; (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="693" width="0.2490%" height="15" fill="rgb(220,129,5)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,usize)&gt;&gt; (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="677" width="0.2490%" height="15" fill="rgb(242,17,10)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="661" width="0.2490%" height="15" fill="rgb(242,107,0)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="671.50"></text></g><g><title>?? (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="645" width="0.2490%" height="15" fill="rgb(251,28,31)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="655.50"></text></g><g><title>?? (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="629" width="0.2490%" height="15" fill="rgb(233,223,10)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="613" width="0.2490%" height="15" fill="rgb(215,21,27)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="597" width="0.2490%" height="15" fill="rgb(232,23,21)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="607.50"></text></g><g><title>__rdl_dealloc (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="581" width="0.2490%" height="15" fill="rgb(244,5,23)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="565" width="0.2490%" height="15" fill="rgb(226,81,46)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="575.50"></text></g><g><title>__GI_munmap (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="549" width="0.2490%" height="15" fill="rgb(247,70,30)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="559.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="533" width="0.2490%" height="15" fill="rgb(212,68,19)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="543.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="517" width="0.2490%" height="15" fill="rgb(240,187,13)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="527.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="501" width="0.2490%" height="15" fill="rgb(223,113,26)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="511.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="485" width="0.2490%" height="15" fill="rgb(206,192,2)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="495.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="469" width="0.2490%" height="15" fill="rgb(241,108,4)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="479.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="453" width="0.2490%" height="15" fill="rgb(247,173,49)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="463.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="437" width="0.2490%" height="15" fill="rgb(224,114,35)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="447.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="421" width="0.2490%" height="15" fill="rgb(245,159,27)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="431.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="405" width="0.2490%" height="15" fill="rgb(245,172,44)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="415.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="389" width="0.2490%" height="15" fill="rgb(236,23,11)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="399.50"></text></g><g><title>[unknown] (3,393,406 samples, 0.25%)</title><rect x="17.9642%" y="373" width="0.2490%" height="15" fill="rgb(205,117,38)" fg:x="244777507" fg:w="3393406"/><text x="18.2142%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,393,966 samples, 0.25%)</title><rect x="20.2056%" y="709" width="0.2491%" height="15" fill="rgb(237,72,25)" fg:x="275319471" fg:w="3393966"/><text x="20.4556%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,393,966 samples, 0.25%)</title><rect x="20.2056%" y="693" width="0.2491%" height="15" fill="rgb(244,70,9)" fg:x="275319471" fg:w="3393966"/><text x="20.4556%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,393,966 samples, 0.25%)</title><rect x="20.2056%" y="677" width="0.2491%" height="15" fill="rgb(217,125,39)" fg:x="275319471" fg:w="3393966"/><text x="20.4556%" y="687.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (10,179,965 samples, 0.75%)</title><rect x="20.4547%" y="693" width="0.7471%" height="15" fill="rgb(235,36,10)" fg:x="278713437" fg:w="10179965"/><text x="20.7047%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6,788,445 samples, 0.50%)</title><rect x="21.2018%" y="693" width="0.4982%" height="15" fill="rgb(251,123,47)" fg:x="288893402" fg:w="6788445"/><text x="21.4518%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6,788,445 samples, 0.50%)</title><rect x="21.2018%" y="677" width="0.4982%" height="15" fill="rgb(221,13,13)" fg:x="288893402" fg:w="6788445"/><text x="21.4518%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6,788,445 samples, 0.50%)</title><rect x="21.2018%" y="661" width="0.4982%" height="15" fill="rgb(238,131,9)" fg:x="288893402" fg:w="6788445"/><text x="21.4518%" y="671.50"></text></g><g><title>?? (61,095,811 samples, 4.48%)</title><rect x="20.4547%" y="709" width="4.4838%" height="15" fill="rgb(211,50,8)" fg:x="278713437" fg:w="61095811"/><text x="20.7047%" y="719.50">??</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (44,127,401 samples, 3.24%)</title><rect x="21.7000%" y="693" width="3.2385%" height="15" fill="rgb(245,182,24)" fg:x="295681847" fg:w="44127401"/><text x="21.9500%" y="703.50">mot..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13,582,797 samples, 1.00%)</title><rect x="24.9385%" y="709" width="0.9968%" height="15" fill="rgb(242,14,37)" fg:x="339809248" fg:w="13582797"/><text x="25.1885%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (13,582,797 samples, 1.00%)</title><rect x="24.9385%" y="693" width="0.9968%" height="15" fill="rgb(246,228,12)" fg:x="339809248" fg:w="13582797"/><text x="25.1885%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (3,396,479 samples, 0.25%)</title><rect x="25.9354%" y="709" width="0.2493%" height="15" fill="rgb(213,55,15)" fg:x="353392045" fg:w="3396479"/><text x="26.1854%" y="719.50"></text></g><g><title>core::slice::sort::quicksort (3,396,479 samples, 0.25%)</title><rect x="25.9354%" y="693" width="0.2493%" height="15" fill="rgb(209,9,3)" fg:x="353392045" fg:w="3396479"/><text x="26.1854%" y="703.50"></text></g><g><title>core::slice::sort::recurse (3,396,479 samples, 0.25%)</title><rect x="25.9354%" y="677" width="0.2493%" height="15" fill="rgb(230,59,30)" fg:x="353392045" fg:w="3396479"/><text x="26.1854%" y="687.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (3,396,479 samples, 0.25%)</title><rect x="25.9354%" y="661" width="0.2493%" height="15" fill="rgb(209,121,21)" fg:x="353392045" fg:w="3396479"/><text x="26.1854%" y="671.50"></text></g><g><title>motif_finder::base::MotifSet::calc_motif_null_binds (210,452,798 samples, 15.45%)</title><rect x="18.2132%" y="741" width="15.4451%" height="15" fill="rgb(220,109,13)" fg:x="248170913" fg:w="210452798"/><text x="18.4632%" y="751.50">motif_finder::base::Moti..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (210,452,798 samples, 15.45%)</title><rect x="18.2132%" y="725" width="15.4451%" height="15" fill="rgb(232,18,1)" fg:x="248170913" fg:w="210452798"/><text x="18.4632%" y="735.50">motif_finder::base::Moti..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (101,835,187 samples, 7.47%)</title><rect x="26.1846%" y="709" width="7.4737%" height="15" fill="rgb(215,41,42)" fg:x="356788524" fg:w="101835187"/><text x="26.4346%" y="719.50">motif_find..</text></g><g><title>motif_finder::modified_t::bpser (16,959,370 samples, 1.24%)</title><rect x="33.6583%" y="661" width="1.2446%" height="15" fill="rgb(224,123,36)" fg:x="458623711" fg:w="16959370"/><text x="33.9083%" y="671.50"></text></g><g><title>motif_finder::modified_t::ln_beta_half_times_a (10,173,134 samples, 0.75%)</title><rect x="34.1563%" y="645" width="0.7466%" height="15" fill="rgb(240,125,3)" fg:x="465409947" fg:w="10173134"/><text x="34.4063%" y="655.50"></text></g><g><title>motif_finder::modified_t::ln_gamma (10,173,134 samples, 0.75%)</title><rect x="34.1563%" y="629" width="0.7466%" height="15" fill="rgb(205,98,50)" fg:x="465409947" fg:w="10173134"/><text x="34.4063%" y="639.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (10,173,134 samples, 0.75%)</title><rect x="34.1563%" y="613" width="0.7466%" height="15" fill="rgb(205,185,37)" fg:x="465409947" fg:w="10173134"/><text x="34.4063%" y="623.50"></text></g><g><title>std::sys::log_wrapper (10,173,134 samples, 0.75%)</title><rect x="34.1563%" y="597" width="0.7466%" height="15" fill="rgb(238,207,15)" fg:x="465409947" fg:w="10173134"/><text x="34.4063%" y="607.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (10,173,134 samples, 0.75%)</title><rect x="34.1563%" y="581" width="0.7466%" height="15" fill="rgb(213,199,42)" fg:x="465409947" fg:w="10173134"/><text x="34.4063%" y="591.50"></text></g><g><title>[libm-2.28.so] (10,173,134 samples, 0.75%)</title><rect x="34.1563%" y="565" width="0.7466%" height="15" fill="rgb(235,201,11)" fg:x="465409947" fg:w="10173134"/><text x="34.4063%" y="575.50"></text></g><g><title>&lt;motif_finder::modified_t::BackgroundDist as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (20,354,289 samples, 1.49%)</title><rect x="33.6583%" y="709" width="1.4938%" height="15" fill="rgb(207,46,11)" fg:x="458623711" fg:w="20354289"/><text x="33.9083%" y="719.50"></text></g><g><title>&lt;motif_finder::modified_t::FastT as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (20,354,289 samples, 1.49%)</title><rect x="33.6583%" y="693" width="1.4938%" height="15" fill="rgb(241,35,35)" fg:x="458623711" fg:w="20354289"/><text x="33.9083%" y="703.50"></text></g><g><title>?? (20,354,289 samples, 1.49%)</title><rect x="33.6583%" y="677" width="1.4938%" height="15" fill="rgb(243,32,47)" fg:x="458623711" fg:w="20354289"/><text x="33.9083%" y="687.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln_1p (3,394,919 samples, 0.25%)</title><rect x="34.9029%" y="661" width="0.2492%" height="15" fill="rgb(247,202,23)" fg:x="475583081" fg:w="3394919"/><text x="35.1529%" y="671.50"></text></g><g><title>metropolis::main (234,201,179 samples, 17.19%)</title><rect x="18.2132%" y="789" width="17.1880%" height="15" fill="rgb(219,102,11)" fg:x="248170913" fg:w="234201179"/><text x="18.4632%" y="799.50">metropolis::main</text></g><g><title>motif_finder::base::MotifSet::change_set_attention (234,201,179 samples, 17.19%)</title><rect x="18.2132%" y="773" width="17.1880%" height="15" fill="rgb(243,110,44)" fg:x="248170913" fg:w="234201179"/><text x="18.4632%" y="783.50">motif_finder::base::MotifSe..</text></g><g><title>motif_finder::base::MotifSet::change_set_attention (234,201,179 samples, 17.19%)</title><rect x="18.2132%" y="757" width="17.1880%" height="15" fill="rgb(222,74,54)" fg:x="248170913" fg:w="234201179"/><text x="18.4632%" y="767.50">motif_finder::base::MotifSe..</text></g><g><title>motif_finder::base::MotifSet::ln_likelihood (23,748,381 samples, 1.74%)</title><rect x="33.6583%" y="741" width="1.7429%" height="15" fill="rgb(216,99,12)" fg:x="458623711" fg:w="23748381"/><text x="33.9083%" y="751.50"></text></g><g><title>?? (23,748,381 samples, 1.74%)</title><rect x="33.6583%" y="725" width="1.7429%" height="15" fill="rgb(226,22,26)" fg:x="458623711" fg:w="23748381"/><text x="33.9083%" y="735.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (3,394,092 samples, 0.25%)</title><rect x="35.1521%" y="709" width="0.2491%" height="15" fill="rgb(217,163,10)" fg:x="478978000" fg:w="3394092"/><text x="35.4021%" y="719.50"></text></g><g><title>std::sys::log_wrapper (3,394,092 samples, 0.25%)</title><rect x="35.1521%" y="693" width="0.2491%" height="15" fill="rgb(213,25,53)" fg:x="478978000" fg:w="3394092"/><text x="35.4021%" y="703.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (3,394,092 samples, 0.25%)</title><rect x="35.1521%" y="677" width="0.2491%" height="15" fill="rgb(252,105,26)" fg:x="478978000" fg:w="3394092"/><text x="35.4021%" y="687.50"></text></g><g><title>[libm-2.28.so] (3,394,092 samples, 0.25%)</title><rect x="35.1521%" y="661" width="0.2491%" height="15" fill="rgb(220,39,43)" fg:x="478978000" fg:w="3394092"/><text x="35.4021%" y="671.50"></text></g><g><title>?? (3,383,451 samples, 0.25%)</title><rect x="35.4012%" y="693" width="0.2483%" height="15" fill="rgb(229,68,48)" fg:x="482372092" fg:w="3383451"/><text x="35.6512%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,383,451 samples, 0.25%)</title><rect x="35.4012%" y="677" width="0.2483%" height="15" fill="rgb(252,8,32)" fg:x="482372092" fg:w="3383451"/><text x="35.6512%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,383,451 samples, 0.25%)</title><rect x="35.4012%" y="661" width="0.2483%" height="15" fill="rgb(223,20,43)" fg:x="482372092" fg:w="3383451"/><text x="35.6512%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,383,451 samples, 0.25%)</title><rect x="35.4012%" y="645" width="0.2483%" height="15" fill="rgb(229,81,49)" fg:x="482372092" fg:w="3383451"/><text x="35.6512%" y="655.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (6,768,473 samples, 0.50%)</title><rect x="35.4012%" y="725" width="0.4967%" height="15" fill="rgb(236,28,36)" fg:x="482372092" fg:w="6768473"/><text x="35.6512%" y="735.50"></text></g><g><title>?? (6,768,473 samples, 0.50%)</title><rect x="35.4012%" y="709" width="0.4967%" height="15" fill="rgb(249,185,26)" fg:x="482372092" fg:w="6768473"/><text x="35.6512%" y="719.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (3,385,022 samples, 0.25%)</title><rect x="35.6495%" y="693" width="0.2484%" height="15" fill="rgb(249,174,33)" fg:x="485755543" fg:w="3385022"/><text x="35.8995%" y="703.50"></text></g><g><title>motif_finder::modified_t::bpser (13,571,444 samples, 1.00%)</title><rect x="35.8979%" y="629" width="0.9960%" height="15" fill="rgb(233,201,37)" fg:x="489140565" fg:w="13571444"/><text x="36.1479%" y="639.50"></text></g><g><title>motif_finder::modified_t::ln_beta_half_times_a (6,784,282 samples, 0.50%)</title><rect x="36.3960%" y="613" width="0.4979%" height="15" fill="rgb(221,78,26)" fg:x="495927727" fg:w="6784282"/><text x="36.6460%" y="623.50"></text></g><g><title>motif_finder::modified_t::ln_gamma (6,784,282 samples, 0.50%)</title><rect x="36.3960%" y="597" width="0.4979%" height="15" fill="rgb(250,127,30)" fg:x="495927727" fg:w="6784282"/><text x="36.6460%" y="607.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (6,784,282 samples, 0.50%)</title><rect x="36.3960%" y="581" width="0.4979%" height="15" fill="rgb(230,49,44)" fg:x="495927727" fg:w="6784282"/><text x="36.6460%" y="591.50"></text></g><g><title>std::sys::log_wrapper (6,784,282 samples, 0.50%)</title><rect x="36.3960%" y="565" width="0.4979%" height="15" fill="rgb(229,67,23)" fg:x="495927727" fg:w="6784282"/><text x="36.6460%" y="575.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (6,784,282 samples, 0.50%)</title><rect x="36.3960%" y="549" width="0.4979%" height="15" fill="rgb(249,83,47)" fg:x="495927727" fg:w="6784282"/><text x="36.6460%" y="559.50"></text></g><g><title>[libm-2.28.so] (6,784,282 samples, 0.50%)</title><rect x="36.3960%" y="533" width="0.4979%" height="15" fill="rgb(215,43,3)" fg:x="495927727" fg:w="6784282"/><text x="36.6460%" y="543.50"></text></g><g><title>&lt;motif_finder::modified_t::BackgroundDist as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (20,352,788 samples, 1.49%)</title><rect x="35.8979%" y="677" width="1.4937%" height="15" fill="rgb(238,154,13)" fg:x="489140565" fg:w="20352788"/><text x="36.1479%" y="687.50"></text></g><g><title>&lt;motif_finder::modified_t::FastT as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (20,352,788 samples, 1.49%)</title><rect x="35.8979%" y="661" width="1.4937%" height="15" fill="rgb(219,56,2)" fg:x="489140565" fg:w="20352788"/><text x="36.1479%" y="671.50"></text></g><g><title>?? (20,352,788 samples, 1.49%)</title><rect x="35.8979%" y="645" width="1.4937%" height="15" fill="rgb(233,0,4)" fg:x="489140565" fg:w="20352788"/><text x="36.1479%" y="655.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (6,781,344 samples, 0.50%)</title><rect x="36.8939%" y="629" width="0.4977%" height="15" fill="rgb(235,30,7)" fg:x="502712009" fg:w="6781344"/><text x="37.1439%" y="639.50"></text></g><g><title>expf32x (6,781,344 samples, 0.50%)</title><rect x="36.8939%" y="613" width="0.4977%" height="15" fill="rgb(250,79,13)" fg:x="502712009" fg:w="6781344"/><text x="37.1439%" y="623.50"></text></g><g><title>[libm-2.28.so] (3,390,826 samples, 0.25%)</title><rect x="37.1428%" y="597" width="0.2489%" height="15" fill="rgb(211,146,34)" fg:x="506102527" fg:w="3390826"/><text x="37.3928%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="677" width="0.2487%" height="15" fill="rgb(228,22,38)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="687.50"></text></g><g><title>core::slice::sort::quicksort (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="661" width="0.2487%" height="15" fill="rgb(235,168,5)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="671.50"></text></g><g><title>core::slice::sort::recurse (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="645" width="0.2487%" height="15" fill="rgb(221,155,16)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="655.50"></text></g><g><title>core::slice::sort::recurse (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="629" width="0.2487%" height="15" fill="rgb(215,215,53)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="639.50"></text></g><g><title>core::slice::sort::partition (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="613" width="0.2487%" height="15" fill="rgb(223,4,10)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="623.50"></text></g><g><title>core::slice::sort::partition_in_blocks (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="597" width="0.2487%" height="15" fill="rgb(234,103,6)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,388,832 samples, 0.25%)</title><rect x="37.3916%" y="581" width="0.2487%" height="15" fill="rgb(227,97,0)" fg:x="509493353" fg:w="3388832"/><text x="37.6416%" y="591.50"></text></g><g><title>motif_finder::base::MotifSet::add_motif (27,132,461 samples, 1.99%)</title><rect x="35.8979%" y="725" width="1.9912%" height="15" fill="rgb(234,150,53)" fg:x="489140565" fg:w="27132461"/><text x="36.1479%" y="735.50">m..</text></g><g><title>motif_finder::base::MotifSet::ln_likelihood (27,132,461 samples, 1.99%)</title><rect x="35.8979%" y="709" width="1.9912%" height="15" fill="rgb(228,201,54)" fg:x="489140565" fg:w="27132461"/><text x="36.1479%" y="719.50">m..</text></g><g><title>?? (27,132,461 samples, 1.99%)</title><rect x="35.8979%" y="693" width="1.9912%" height="15" fill="rgb(222,22,37)" fg:x="489140565" fg:w="27132461"/><text x="36.1479%" y="703.50">??</text></g><g><title>std::f64::&lt;impl f64&gt;::ln (3,390,841 samples, 0.25%)</title><rect x="37.6403%" y="677" width="0.2489%" height="15" fill="rgb(237,53,32)" fg:x="512882185" fg:w="3390841"/><text x="37.8903%" y="687.50"></text></g><g><title>std::sys::log_wrapper (3,390,841 samples, 0.25%)</title><rect x="37.6403%" y="661" width="0.2489%" height="15" fill="rgb(233,25,53)" fg:x="512882185" fg:w="3390841"/><text x="37.8903%" y="671.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (3,390,841 samples, 0.25%)</title><rect x="37.6403%" y="645" width="0.2489%" height="15" fill="rgb(210,40,34)" fg:x="512882185" fg:w="3390841"/><text x="37.8903%" y="655.50"></text></g><g><title>[libm-2.28.so] (3,390,841 samples, 0.25%)</title><rect x="37.6403%" y="629" width="0.2489%" height="15" fill="rgb(241,220,44)" fg:x="512882185" fg:w="3390841"/><text x="37.8903%" y="639.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (10,164,399 samples, 0.75%)</title><rect x="38.6356%" y="677" width="0.7460%" height="15" fill="rgb(235,28,35)" fg:x="526444309" fg:w="10164399"/><text x="38.8856%" y="687.50"></text></g><g><title>?? (30,511,518 samples, 2.24%)</title><rect x="38.6356%" y="693" width="2.2392%" height="15" fill="rgb(210,56,17)" fg:x="526444309" fg:w="30511518"/><text x="38.8856%" y="703.50">??</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (20,347,119 samples, 1.49%)</title><rect x="39.3816%" y="677" width="1.4933%" height="15" fill="rgb(224,130,29)" fg:x="536608708" fg:w="20347119"/><text x="39.6316%" y="687.50"></text></g><g><title>?? (128,831,023 samples, 9.45%)</title><rect x="35.4012%" y="773" width="9.4549%" height="15" fill="rgb(235,212,8)" fg:x="482372092" fg:w="128831023"/><text x="35.6512%" y="783.50">??</text></g><g><title>motif_finder::base::SetTrace::advance (128,831,023 samples, 9.45%)</title><rect x="35.4012%" y="757" width="9.4549%" height="15" fill="rgb(223,33,50)" fg:x="482372092" fg:w="128831023"/><text x="35.6512%" y="767.50">motif_finder::..</text></g><g><title>motif_finder::base::MotifSet::add_motif (128,831,023 samples, 9.45%)</title><rect x="35.4012%" y="741" width="9.4549%" height="15" fill="rgb(219,149,13)" fg:x="482372092" fg:w="128831023"/><text x="35.6512%" y="751.50">motif_finder::..</text></g><g><title>motif_finder::base::MotifSet::calc_motif_null_binds (94,930,089 samples, 6.97%)</title><rect x="37.8892%" y="725" width="6.9669%" height="15" fill="rgb(250,156,29)" fg:x="516273026" fg:w="94930089"/><text x="38.1392%" y="735.50">motif_fin..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (94,930,089 samples, 6.97%)</title><rect x="37.8892%" y="709" width="6.9669%" height="15" fill="rgb(216,193,19)" fg:x="516273026" fg:w="94930089"/><text x="38.1392%" y="719.50">motif_fin..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (54,247,288 samples, 3.98%)</title><rect x="40.8749%" y="693" width="3.9812%" height="15" fill="rgb(216,135,14)" fg:x="556955827" fg:w="54247288"/><text x="41.1249%" y="703.50">moti..</text></g><g><title>&lt;&amp;motif_finder::waveform::Kernel as core::ops::arith::Mul&lt;f64&gt;&gt;::mul::_{{closure}} (3,389,973 samples, 0.25%)</title><rect x="44.8561%" y="549" width="0.2488%" height="15" fill="rgb(241,47,5)" fg:x="611203115" fg:w="3389973"/><text x="45.1061%" y="559.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (3,389,973 samples, 0.25%)</title><rect x="44.8561%" y="533" width="0.2488%" height="15" fill="rgb(233,42,35)" fg:x="611203115" fg:w="3389973"/><text x="45.1061%" y="543.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3,389,973 samples, 0.25%)</title><rect x="44.8561%" y="517" width="0.2488%" height="15" fill="rgb(231,13,6)" fg:x="611203115" fg:w="3389973"/><text x="45.1061%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,782,262 samples, 0.50%)</title><rect x="44.8561%" y="645" width="0.4977%" height="15" fill="rgb(207,181,40)" fg:x="611203115" fg:w="6782262"/><text x="45.1061%" y="655.50"></text></g><g><title>?? (6,782,262 samples, 0.50%)</title><rect x="44.8561%" y="629" width="0.4977%" height="15" fill="rgb(254,173,49)" fg:x="611203115" fg:w="6782262"/><text x="45.1061%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,782,262 samples, 0.50%)</title><rect x="44.8561%" y="613" width="0.4977%" height="15" fill="rgb(221,1,38)" fg:x="611203115" fg:w="6782262"/><text x="45.1061%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,782,262 samples, 0.50%)</title><rect x="44.8561%" y="597" width="0.4977%" height="15" fill="rgb(206,124,46)" fg:x="611203115" fg:w="6782262"/><text x="45.1061%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,782,262 samples, 0.50%)</title><rect x="44.8561%" y="581" width="0.4977%" height="15" fill="rgb(249,21,11)" fg:x="611203115" fg:w="6782262"/><text x="45.1061%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6,782,262 samples, 0.50%)</title><rect x="44.8561%" y="565" width="0.4977%" height="15" fill="rgb(222,201,40)" fg:x="611203115" fg:w="6782262"/><text x="45.1061%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,392,289 samples, 0.25%)</title><rect x="45.1049%" y="549" width="0.2490%" height="15" fill="rgb(235,61,29)" fg:x="614593088" fg:w="3392289"/><text x="45.3549%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,392,289 samples, 0.25%)</title><rect x="45.1049%" y="533" width="0.2490%" height="15" fill="rgb(219,207,3)" fg:x="614593088" fg:w="3392289"/><text x="45.3549%" y="543.50"></text></g><g><title>core::ptr::write (3,392,289 samples, 0.25%)</title><rect x="45.1049%" y="517" width="0.2490%" height="15" fill="rgb(222,56,46)" fg:x="614593088" fg:w="3392289"/><text x="45.3549%" y="527.50"></text></g><g><title>&lt;&amp;motif_finder::waveform::Kernel as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (10,176,959 samples, 0.75%)</title><rect x="44.8561%" y="725" width="0.7469%" height="15" fill="rgb(239,76,54)" fg:x="611203115" fg:w="10176959"/><text x="45.1061%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10,176,959 samples, 0.75%)</title><rect x="44.8561%" y="709" width="0.7469%" height="15" fill="rgb(231,124,27)" fg:x="611203115" fg:w="10176959"/><text x="45.1061%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10,176,959 samples, 0.75%)</title><rect x="44.8561%" y="693" width="0.7469%" height="15" fill="rgb(249,195,6)" fg:x="611203115" fg:w="10176959"/><text x="45.1061%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,176,959 samples, 0.75%)</title><rect x="44.8561%" y="677" width="0.7469%" height="15" fill="rgb(237,174,47)" fg:x="611203115" fg:w="10176959"/><text x="45.1061%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10,176,959 samples, 0.75%)</title><rect x="44.8561%" y="661" width="0.7469%" height="15" fill="rgb(206,201,31)" fg:x="611203115" fg:w="10176959"/><text x="45.1061%" y="671.50"></text></g><g><title>?? (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="645" width="0.2491%" height="15" fill="rgb(231,57,52)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="655.50"></text></g><g><title>?? (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="629" width="0.2491%" height="15" fill="rgb(248,177,22)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="639.50"></text></g><g><title>?? (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="613" width="0.2491%" height="15" fill="rgb(215,211,37)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="623.50"></text></g><g><title>?? (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="597" width="0.2491%" height="15" fill="rgb(241,128,51)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="581" width="0.2491%" height="15" fill="rgb(227,165,31)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="591.50"></text></g><g><title>?? (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="565" width="0.2491%" height="15" fill="rgb(228,167,24)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="575.50"></text></g><g><title>alloc::alloc::alloc (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="549" width="0.2491%" height="15" fill="rgb(228,143,12)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="559.50"></text></g><g><title>__rdl_alloc (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="533" width="0.2491%" height="15" fill="rgb(249,149,8)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="517" width="0.2491%" height="15" fill="rgb(243,35,44)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="527.50"></text></g><g><title>__GI___libc_malloc (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="501" width="0.2491%" height="15" fill="rgb(246,89,9)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="511.50"></text></g><g><title>_int_malloc (3,394,697 samples, 0.25%)</title><rect x="45.3538%" y="485" width="0.2491%" height="15" fill="rgb(233,213,13)" fg:x="617985377" fg:w="3394697"/><text x="45.6038%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6,785,280 samples, 0.50%)</title><rect x="45.6030%" y="693" width="0.4980%" height="15" fill="rgb(233,141,41)" fg:x="621380074" fg:w="6785280"/><text x="45.8530%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6,785,280 samples, 0.50%)</title><rect x="45.6030%" y="677" width="0.4980%" height="15" fill="rgb(239,167,4)" fg:x="621380074" fg:w="6785280"/><text x="45.8530%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6,785,280 samples, 0.50%)</title><rect x="45.6030%" y="661" width="0.4980%" height="15" fill="rgb(209,217,16)" fg:x="621380074" fg:w="6785280"/><text x="45.8530%" y="671.50"></text></g><g><title>?? (10,179,080 samples, 0.75%)</title><rect x="45.6030%" y="709" width="0.7470%" height="15" fill="rgb(219,88,35)" fg:x="621380074" fg:w="10179080"/><text x="45.8530%" y="719.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (3,393,800 samples, 0.25%)</title><rect x="46.1009%" y="693" width="0.2491%" height="15" fill="rgb(220,193,23)" fg:x="628165354" fg:w="3393800"/><text x="46.3509%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,394,000 samples, 0.25%)</title><rect x="46.3500%" y="709" width="0.2491%" height="15" fill="rgb(230,90,52)" fg:x="631559154" fg:w="3394000"/><text x="46.6000%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,394,000 samples, 0.25%)</title><rect x="46.3500%" y="693" width="0.2491%" height="15" fill="rgb(252,106,19)" fg:x="631559154" fg:w="3394000"/><text x="46.6000%" y="703.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3,394,000 samples, 0.25%)</title><rect x="46.3500%" y="677" width="0.2491%" height="15" fill="rgb(206,74,20)" fg:x="631559154" fg:w="3394000"/><text x="46.6000%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (3,394,000 samples, 0.25%)</title><rect x="46.3500%" y="661" width="0.2491%" height="15" fill="rgb(230,138,44)" fg:x="631559154" fg:w="3394000"/><text x="46.6000%" y="671.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (30,530,208 samples, 2.24%)</title><rect x="44.8561%" y="741" width="2.2406%" height="15" fill="rgb(235,182,43)" fg:x="611203115" fg:w="30530208"/><text x="45.1061%" y="751.50">m..</text></g><g><title>?? (20,353,249 samples, 1.49%)</title><rect x="45.6030%" y="725" width="1.4937%" height="15" fill="rgb(242,16,51)" fg:x="621380074" fg:w="20353249"/><text x="45.8530%" y="735.50"></text></g><g><title>motif_finder::base::Motif::generate_waveform (6,780,169 samples, 0.50%)</title><rect x="46.5991%" y="709" width="0.4976%" height="15" fill="rgb(248,9,4)" fg:x="634953154" fg:w="6780169"/><text x="46.8491%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,394,880 samples, 0.25%)</title><rect x="51.0813%" y="709" width="0.2491%" height="15" fill="rgb(210,31,22)" fg:x="696027852" fg:w="3394880"/><text x="51.3313%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,394,880 samples, 0.25%)</title><rect x="51.0813%" y="693" width="0.2491%" height="15" fill="rgb(239,54,39)" fg:x="696027852" fg:w="3394880"/><text x="51.3313%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,394,880 samples, 0.25%)</title><rect x="51.0813%" y="677" width="0.2491%" height="15" fill="rgb(230,99,41)" fg:x="696027852" fg:w="3394880"/><text x="51.3313%" y="687.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (23,749,603 samples, 1.74%)</title><rect x="51.3305%" y="693" width="1.7430%" height="15" fill="rgb(253,106,12)" fg:x="699422732" fg:w="23749603"/><text x="51.5805%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13,586,051 samples, 1.00%)</title><rect x="53.0735%" y="693" width="0.9971%" height="15" fill="rgb(213,46,41)" fg:x="723172335" fg:w="13586051"/><text x="53.3235%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (13,586,051 samples, 1.00%)</title><rect x="53.0735%" y="677" width="0.9971%" height="15" fill="rgb(215,133,35)" fg:x="723172335" fg:w="13586051"/><text x="53.3235%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (13,586,051 samples, 1.00%)</title><rect x="53.0735%" y="661" width="0.9971%" height="15" fill="rgb(213,28,5)" fg:x="723172335" fg:w="13586051"/><text x="53.3235%" y="671.50"></text></g><g><title>?? (111,987,055 samples, 8.22%)</title><rect x="51.3305%" y="709" width="8.2187%" height="15" fill="rgb(215,77,49)" fg:x="699422732" fg:w="111987055"/><text x="51.5805%" y="719.50">??</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (74,651,401 samples, 5.48%)</title><rect x="54.0705%" y="693" width="5.4787%" height="15" fill="rgb(248,100,22)" fg:x="736758386" fg:w="74651401"/><text x="54.3205%" y="703.50">motif_f..</text></g><g><title>alloc::vec::from_elem (3,393,933 samples, 0.25%)</title><rect x="59.5492%" y="709" width="0.2491%" height="15" fill="rgb(208,67,9)" fg:x="811409787" fg:w="3393933"/><text x="59.7992%" y="719.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,393,933 samples, 0.25%)</title><rect x="59.5492%" y="693" width="0.2491%" height="15" fill="rgb(219,133,21)" fg:x="811409787" fg:w="3393933"/><text x="59.7992%" y="703.50"></text></g><g><title>?? (3,393,933 samples, 0.25%)</title><rect x="59.5492%" y="677" width="0.2491%" height="15" fill="rgb(246,46,29)" fg:x="811409787" fg:w="3393933"/><text x="59.7992%" y="687.50"></text></g><g><title>core::ptr::write (3,393,933 samples, 0.25%)</title><rect x="59.5492%" y="661" width="0.2491%" height="15" fill="rgb(246,185,52)" fg:x="811409787" fg:w="3393933"/><text x="59.7992%" y="671.50"></text></g><g><title>__memset_avx2_unaligned_erms (3,393,933 samples, 0.25%)</title><rect x="59.5492%" y="645" width="0.2491%" height="15" fill="rgb(252,136,11)" fg:x="811409787" fg:w="3393933"/><text x="59.7992%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16,971,904 samples, 1.25%)</title><rect x="59.7983%" y="709" width="1.2456%" height="15" fill="rgb(219,138,53)" fg:x="814803720" fg:w="16971904"/><text x="60.0483%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16,971,904 samples, 1.25%)</title><rect x="59.7983%" y="693" width="1.2456%" height="15" fill="rgb(211,51,23)" fg:x="814803720" fg:w="16971904"/><text x="60.0483%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,388,291 samples, 0.25%)</title><rect x="60.7952%" y="677" width="0.2487%" height="15" fill="rgb(247,221,28)" fg:x="828387333" fg:w="3388291"/><text x="61.0452%" y="687.50"></text></g><g><title>motif_finder::base::MotifSet::calc_motif_null_binds (434,391,579 samples, 31.88%)</title><rect x="47.0967%" y="741" width="31.8799%" height="15" fill="rgb(251,222,45)" fg:x="641733323" fg:w="434391579"/><text x="47.3467%" y="751.50">motif_finder::base::MotifSet::calc_motif_null_binds</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (434,391,579 samples, 31.88%)</title><rect x="47.0967%" y="725" width="31.8799%" height="15" fill="rgb(217,162,53)" fg:x="641733323" fg:w="434391579"/><text x="47.3467%" y="735.50">motif_finder::base::Motif::return_any_null_binds_in_..</text></g><g><title>motif_finder::base::Motif::return_any_null_binds_in_group (244,349,278 samples, 17.93%)</title><rect x="61.0438%" y="709" width="17.9327%" height="15" fill="rgb(229,93,14)" fg:x="831775624" fg:w="244349278"/><text x="61.2938%" y="719.50">motif_finder::base::Motif::r..</text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="693" width="0.2491%" height="15" fill="rgb(209,67,49)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="703.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="677" width="0.2491%" height="15" fill="rgb(213,87,29)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="687.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="661" width="0.2491%" height="15" fill="rgb(205,151,52)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="671.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="645" width="0.2491%" height="15" fill="rgb(253,215,39)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="655.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="629" width="0.2491%" height="15" fill="rgb(221,220,41)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="639.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="613" width="0.2491%" height="15" fill="rgb(218,133,21)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="623.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="597" width="0.2491%" height="15" fill="rgb(221,193,43)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="607.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="581" width="0.2491%" height="15" fill="rgb(240,128,52)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="591.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="565" width="0.2491%" height="15" fill="rgb(253,114,12)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="575.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="549" width="0.2491%" height="15" fill="rgb(215,223,47)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="559.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="533" width="0.2491%" height="15" fill="rgb(248,225,23)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="543.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="517" width="0.2491%" height="15" fill="rgb(250,108,0)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="527.50"></text></g><g><title>[unknown] (3,393,894 samples, 0.25%)</title><rect x="78.7275%" y="501" width="0.2491%" height="15" fill="rgb(228,208,7)" fg:x="1072731008" fg:w="3393894"/><text x="78.9775%" y="511.50"></text></g><g><title>motif_finder::base::MotifSet::ln_likelihood (6,792,816 samples, 0.50%)</title><rect x="78.9766%" y="645" width="0.4985%" height="15" fill="rgb(244,45,10)" fg:x="1076124902" fg:w="6792816"/><text x="79.2266%" y="655.50"></text></g><g><title>motif_finder::modified_t::ln_beta_half_times_a (3,385,107 samples, 0.25%)</title><rect x="80.9685%" y="629" width="0.2484%" height="15" fill="rgb(207,125,25)" fg:x="1103266487" fg:w="3385107"/><text x="81.2185%" y="639.50"></text></g><g><title>motif_finder::modified_t::ln_gamma (3,385,107 samples, 0.25%)</title><rect x="80.9685%" y="613" width="0.2484%" height="15" fill="rgb(210,195,18)" fg:x="1103266487" fg:w="3385107"/><text x="81.2185%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (3,385,107 samples, 0.25%)</title><rect x="80.9685%" y="597" width="0.2484%" height="15" fill="rgb(249,80,12)" fg:x="1103266487" fg:w="3385107"/><text x="81.2185%" y="607.50"></text></g><g><title>std::sys::log_wrapper (3,385,107 samples, 0.25%)</title><rect x="80.9685%" y="581" width="0.2484%" height="15" fill="rgb(221,65,9)" fg:x="1103266487" fg:w="3385107"/><text x="81.2185%" y="591.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (3,385,107 samples, 0.25%)</title><rect x="80.9685%" y="565" width="0.2484%" height="15" fill="rgb(235,49,36)" fg:x="1103266487" fg:w="3385107"/><text x="81.2185%" y="575.50"></text></g><g><title>[libm-2.28.so] (3,385,107 samples, 0.25%)</title><rect x="80.9685%" y="549" width="0.2484%" height="15" fill="rgb(225,32,20)" fg:x="1103266487" fg:w="3385107"/><text x="81.2185%" y="559.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (3,397,651 samples, 0.25%)</title><rect x="81.2169%" y="629" width="0.2494%" height="15" fill="rgb(215,141,46)" fg:x="1106651594" fg:w="3397651"/><text x="81.4669%" y="639.50"></text></g><g><title>std::sys::log_wrapper (3,397,651 samples, 0.25%)</title><rect x="81.2169%" y="613" width="0.2494%" height="15" fill="rgb(250,160,47)" fg:x="1106651594" fg:w="3397651"/><text x="81.4669%" y="623.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (3,397,651 samples, 0.25%)</title><rect x="81.2169%" y="597" width="0.2494%" height="15" fill="rgb(216,222,40)" fg:x="1106651594" fg:w="3397651"/><text x="81.4669%" y="607.50"></text></g><g><title>[libm-2.28.so] (3,397,651 samples, 0.25%)</title><rect x="81.2169%" y="581" width="0.2494%" height="15" fill="rgb(234,217,39)" fg:x="1106651594" fg:w="3397651"/><text x="81.4669%" y="591.50"></text></g><g><title>motif_finder::modified_t::bpser (30,517,031 samples, 2.24%)</title><rect x="79.4751%" y="645" width="2.2396%" height="15" fill="rgb(207,178,40)" fg:x="1082917718" fg:w="30517031"/><text x="79.7251%" y="655.50">m..</text></g><g><title>std::f64::&lt;impl f64&gt;::ln_1p (3,385,504 samples, 0.25%)</title><rect x="81.4663%" y="629" width="0.2485%" height="15" fill="rgb(221,136,13)" fg:x="1110049245" fg:w="3385504"/><text x="81.7163%" y="639.50"></text></g><g><title>[libm-2.28.so] (3,385,504 samples, 0.25%)</title><rect x="81.4663%" y="613" width="0.2485%" height="15" fill="rgb(249,199,10)" fg:x="1110049245" fg:w="3385504"/><text x="81.7163%" y="623.50"></text></g><g><title>&lt;motif_finder::modified_t::BackgroundDist as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (40,699,461 samples, 2.99%)</title><rect x="78.9766%" y="693" width="2.9869%" height="15" fill="rgb(249,222,13)" fg:x="1076124902" fg:w="40699461"/><text x="79.2266%" y="703.50">&lt;mo..</text></g><g><title>&lt;motif_finder::modified_t::FastT as statrs::distribution::ContinuousCDF&lt;f64,f64&gt;&gt;::sf (40,699,461 samples, 2.99%)</title><rect x="78.9766%" y="677" width="2.9869%" height="15" fill="rgb(244,185,38)" fg:x="1076124902" fg:w="40699461"/><text x="79.2266%" y="687.50">&lt;mo..</text></g><g><title>?? (40,699,461 samples, 2.99%)</title><rect x="78.9766%" y="661" width="2.9869%" height="15" fill="rgb(236,202,9)" fg:x="1076124902" fg:w="40699461"/><text x="79.2266%" y="671.50">??</text></g><g><title>std::f64::&lt;impl f64&gt;::exp (3,389,614 samples, 0.25%)</title><rect x="81.7147%" y="645" width="0.2488%" height="15" fill="rgb(250,229,37)" fg:x="1113434749" fg:w="3389614"/><text x="81.9647%" y="655.50"></text></g><g><title>expf32x (3,389,614 samples, 0.25%)</title><rect x="81.7147%" y="629" width="0.2488%" height="15" fill="rgb(206,174,23)" fg:x="1113434749" fg:w="3389614"/><text x="81.9647%" y="639.50"></text></g><g><title>[libm-2.28.so] (3,389,614 samples, 0.25%)</title><rect x="81.7147%" y="613" width="0.2488%" height="15" fill="rgb(211,33,43)" fg:x="1113434749" fg:w="3389614"/><text x="81.9647%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;f64&gt;&gt; (3,397,893 samples, 0.25%)</title><rect x="81.9635%" y="533" width="0.2494%" height="15" fill="rgb(245,58,50)" fg:x="1116824363" fg:w="3397893"/><text x="82.2135%" y="543.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,397,893 samples, 0.25%)</title><rect x="81.9635%" y="517" width="0.2494%" height="15" fill="rgb(244,68,36)" fg:x="1116824363" fg:w="3397893"/><text x="82.2135%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,397,893 samples, 0.25%)</title><rect x="81.9635%" y="501" width="0.2494%" height="15" fill="rgb(232,229,15)" fg:x="1116824363" fg:w="3397893"/><text x="82.2135%" y="511.50"></text></g><g><title>?? (47,488,305 samples, 3.49%)</title><rect x="78.9766%" y="709" width="3.4852%" height="15" fill="rgb(254,30,23)" fg:x="1076124902" fg:w="47488305"/><text x="79.2266%" y="719.50">??</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="693" width="0.4982%" height="15" fill="rgb(235,160,14)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="703.50"></text></g><g><title>core::slice::sort::quicksort (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="677" width="0.4982%" height="15" fill="rgb(212,155,44)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="687.50"></text></g><g><title>core::slice::sort::recurse (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="661" width="0.4982%" height="15" fill="rgb(226,2,50)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="671.50"></text></g><g><title>core::slice::sort::recurse (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="645" width="0.4982%" height="15" fill="rgb(234,177,6)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="655.50"></text></g><g><title>core::slice::sort::recurse (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="629" width="0.4982%" height="15" fill="rgb(217,24,9)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="639.50"></text></g><g><title>core::slice::sort::recurse (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="613" width="0.4982%" height="15" fill="rgb(220,13,46)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="623.50"></text></g><g><title>core::slice::sort::recurse (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="597" width="0.4982%" height="15" fill="rgb(239,221,27)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="607.50"></text></g><g><title>core::slice::sort::recurse (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="581" width="0.4982%" height="15" fill="rgb(222,198,25)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="591.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="565" width="0.4982%" height="15" fill="rgb(211,99,13)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="575.50"></text></g><g><title>core::slice::sort::insert_tail (6,788,844 samples, 0.50%)</title><rect x="81.9635%" y="549" width="0.4982%" height="15" fill="rgb(232,111,31)" fg:x="1116824363" fg:w="6788844"/><text x="82.2135%" y="559.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by::_{{closure}} (3,390,951 samples, 0.25%)</title><rect x="82.2129%" y="533" width="0.2489%" height="15" fill="rgb(245,82,37)" fg:x="1120222256" fg:w="3390951"/><text x="82.4629%" y="543.50"></text></g><g><title>motif_finder::waveform::Noise::ad_calc::_{{closure}} (3,390,951 samples, 0.25%)</title><rect x="82.2129%" y="517" width="0.2489%" height="15" fill="rgb(227,149,46)" fg:x="1120222256" fg:w="3390951"/><text x="82.4629%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (3,390,951 samples, 0.25%)</title><rect x="82.2129%" y="501" width="0.2489%" height="15" fill="rgb(218,36,50)" fg:x="1120222256" fg:w="3390951"/><text x="82.4629%" y="511.50"></text></g><g><title>motif_finder::base::SetTrace::advance (515,797,163 samples, 37.85%)</title><rect x="44.8561%" y="773" width="37.8542%" height="15" fill="rgb(226,80,48)" fg:x="611203115" fg:w="515797163"/><text x="45.1061%" y="783.50">motif_finder::base::SetTrace::advance</text></g><g><title>motif_finder::base::MotifSet::replace_motif (515,797,163 samples, 37.85%)</title><rect x="44.8561%" y="757" width="37.8542%" height="15" fill="rgb(238,224,15)" fg:x="611203115" fg:w="515797163"/><text x="45.1061%" y="767.50">motif_finder::base::MotifSet::replace_motif</text></g><g><title>motif_finder::base::MotifSet::replace_motif (50,875,376 samples, 3.73%)</title><rect x="78.9766%" y="741" width="3.7337%" height="15" fill="rgb(241,136,10)" fg:x="1076124902" fg:w="50875376"/><text x="79.2266%" y="751.50">moti..</text></g><g><title>motif_finder::base::MotifSet::ln_likelihood (50,875,376 samples, 3.73%)</title><rect x="78.9766%" y="725" width="3.7337%" height="15" fill="rgb(208,32,45)" fg:x="1076124902" fg:w="50875376"/><text x="79.2266%" y="735.50">moti..</text></g><g><title>motif_finder::base::MotifSet::ln_likelihood (3,387,071 samples, 0.25%)</title><rect x="82.4617%" y="709" width="0.2486%" height="15" fill="rgb(207,135,9)" fg:x="1123613207" fg:w="3387071"/><text x="82.7117%" y="719.50"></text></g><g><title>motif_finder::base::SetTrace::advance (648,024,310 samples, 47.56%)</title><rect x="35.4012%" y="789" width="47.5584%" height="15" fill="rgb(206,86,44)" fg:x="482372092" fg:w="648024310"/><text x="35.6512%" y="799.50">motif_finder::base::SetTrace::advance</text></g><g><title>std::io::stdio::_print (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="773" width="0.2492%" height="15" fill="rgb(245,177,15)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="783.50"></text></g><g><title>std::io::stdio::print_to (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="757" width="0.2492%" height="15" fill="rgb(206,64,50)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="767.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="741" width="0.2492%" height="15" fill="rgb(234,36,40)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="751.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="725" width="0.2492%" height="15" fill="rgb(213,64,8)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="735.50"></text></g><g><title>std::io::Write::write_fmt (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="709" width="0.2492%" height="15" fill="rgb(210,75,36)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="719.50"></text></g><g><title>core::fmt::write (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="693" width="0.2492%" height="15" fill="rgb(229,88,21)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="703.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="677" width="0.2492%" height="15" fill="rgb(252,204,47)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="687.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="661" width="0.2492%" height="15" fill="rgb(208,77,27)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="671.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="645" width="0.2492%" height="15" fill="rgb(221,76,26)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="655.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="629" width="0.2492%" height="15" fill="rgb(225,139,18)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="639.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="613" width="0.2492%" height="15" fill="rgb(230,137,11)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="597" width="0.2492%" height="15" fill="rgb(212,28,1)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="607.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="581" width="0.2492%" height="15" fill="rgb(248,164,17)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="591.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="565" width="0.2492%" height="15" fill="rgb(222,171,42)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="575.50"></text></g><g><title>__libc_write (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="549" width="0.2492%" height="15" fill="rgb(243,84,45)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="559.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="533" width="0.2492%" height="15" fill="rgb(252,49,23)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="543.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="517" width="0.2492%" height="15" fill="rgb(215,19,7)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="527.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="501" width="0.2492%" height="15" fill="rgb(238,81,41)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="511.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="485" width="0.2492%" height="15" fill="rgb(210,199,37)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="495.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="469" width="0.2492%" height="15" fill="rgb(244,192,49)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="479.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="453" width="0.2492%" height="15" fill="rgb(226,211,11)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="463.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="437" width="0.2492%" height="15" fill="rgb(236,162,54)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="447.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="421" width="0.2492%" height="15" fill="rgb(220,229,9)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="431.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="405" width="0.2492%" height="15" fill="rgb(250,87,22)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="415.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="389" width="0.2492%" height="15" fill="rgb(239,43,17)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="399.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="373" width="0.2492%" height="15" fill="rgb(231,177,25)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="383.50"></text></g><g><title>[unknown] (3,396,124 samples, 0.25%)</title><rect x="82.7103%" y="357" width="0.2492%" height="15" fill="rgb(219,179,1)" fg:x="1127000278" fg:w="3396124"/><text x="82.9603%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="421" width="0.2492%" height="15" fill="rgb(238,219,53)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="405" width="0.2492%" height="15" fill="rgb(232,167,36)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="389" width="0.2492%" height="15" fill="rgb(244,19,51)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="373" width="0.2492%" height="15" fill="rgb(224,6,22)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="357" width="0.2492%" height="15" fill="rgb(224,145,5)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="341" width="0.2492%" height="15" fill="rgb(234,130,49)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="351.50"></text></g><g><title>?? (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="325" width="0.2492%" height="15" fill="rgb(254,6,2)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="335.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="309" width="0.2492%" height="15" fill="rgb(208,96,46)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="293" width="0.2492%" height="15" fill="rgb(239,3,39)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3,395,490 samples, 0.25%)</title><rect x="82.9596%" y="277" width="0.2492%" height="15" fill="rgb(233,210,1)" fg:x="1130396402" fg:w="3395490"/><text x="83.2096%" y="287.50"></text></g><g><title>motif_finder::sequence::_::&lt;impl serde::de::Deserialize for motif_finder::sequence::NullSequence&gt;::deserialize (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="581" width="0.4984%" height="15" fill="rgb(244,137,37)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="565" width="0.4984%" height="15" fill="rgb(240,136,2)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="549" width="0.4984%" height="15" fill="rgb(239,18,37)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="559.50"></text></g><g><title>&lt;motif_finder::sequence::_::&lt;impl serde::de::Deserialize for motif_finder::sequence::NullSequence&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="533" width="0.4984%" height="15" fill="rgb(218,185,22)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="517" width="0.4984%" height="15" fill="rgb(225,218,4)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="501" width="0.4984%" height="15" fill="rgb(230,182,32)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="485" width="0.4984%" height="15" fill="rgb(242,56,43)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="469" width="0.4984%" height="15" fill="rgb(233,99,24)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="453" width="0.4984%" height="15" fill="rgb(234,209,42)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6,790,983 samples, 0.50%)</title><rect x="82.9596%" y="437" width="0.4984%" height="15" fill="rgb(227,7,12)" fg:x="1130396402" fg:w="6790983"/><text x="83.2096%" y="447.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,395,493 samples, 0.25%)</title><rect x="83.2088%" y="421" width="0.2492%" height="15" fill="rgb(245,203,43)" fg:x="1133791892" fg:w="3395493"/><text x="83.4588%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="309" width="1.2469%" height="15" fill="rgb(238,205,33)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="293" width="1.2469%" height="15" fill="rgb(231,56,7)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="303.50"></text></g><g><title>?? (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="277" width="1.2469%" height="15" fill="rgb(244,186,29)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="287.50"></text></g><g><title>?? (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="261" width="1.2469%" height="15" fill="rgb(234,111,31)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="271.50"></text></g><g><title>?? (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="245" width="1.2469%" height="15" fill="rgb(241,149,10)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="255.50"></text></g><g><title>?? (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="229" width="1.2469%" height="15" fill="rgb(249,206,44)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="213" width="1.2469%" height="15" fill="rgb(251,153,30)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="223.50"></text></g><g><title>core::intrinsics::write_bytes (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="197" width="1.2469%" height="15" fill="rgb(239,152,38)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="207.50"></text></g><g><title>__memset_avx2_unaligned_erms (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="181" width="1.2469%" height="15" fill="rgb(249,139,47)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="191.50"></text></g><g><title>[unknown] (16,990,206 samples, 1.25%)</title><rect x="83.4579%" y="165" width="1.2469%" height="15" fill="rgb(244,64,35)" fg:x="1137187385" fg:w="16990206"/><text x="83.7079%" y="175.50"></text></g><g><title>[unknown] (13,596,375 samples, 1.00%)</title><rect x="83.7070%" y="149" width="0.9978%" height="15" fill="rgb(216,46,15)" fg:x="1140581216" fg:w="13596375"/><text x="83.9570%" y="159.50"></text></g><g><title>[unknown] (13,596,375 samples, 1.00%)</title><rect x="83.7070%" y="133" width="0.9978%" height="15" fill="rgb(250,74,19)" fg:x="1140581216" fg:w="13596375"/><text x="83.9570%" y="143.50"></text></g><g><title>[unknown] (10,173,838 samples, 0.75%)</title><rect x="83.9582%" y="117" width="0.7467%" height="15" fill="rgb(249,42,33)" fg:x="1144003753" fg:w="10173838"/><text x="84.2082%" y="127.50"></text></g><g><title>[unknown] (10,173,838 samples, 0.75%)</title><rect x="83.9582%" y="101" width="0.7467%" height="15" fill="rgb(242,149,17)" fg:x="1144003753" fg:w="10173838"/><text x="84.2082%" y="111.50"></text></g><g><title>[unknown] (3,391,360 samples, 0.25%)</title><rect x="84.4560%" y="85" width="0.2489%" height="15" fill="rgb(244,29,21)" fg:x="1150786231" fg:w="3391360"/><text x="84.7060%" y="95.50"></text></g><g><title>[unknown] (3,391,360 samples, 0.25%)</title><rect x="84.4560%" y="69" width="0.2489%" height="15" fill="rgb(220,130,37)" fg:x="1150786231" fg:w="3391360"/><text x="84.7060%" y="79.50"></text></g><g><title>[unknown] (3,391,360 samples, 0.25%)</title><rect x="84.4560%" y="53" width="0.2489%" height="15" fill="rgb(211,67,2)" fg:x="1150786231" fg:w="3391360"/><text x="84.7060%" y="63.50"></text></g><g><title>[unknown] (3,391,360 samples, 0.25%)</title><rect x="84.4560%" y="37" width="0.2489%" height="15" fill="rgb(235,68,52)" fg:x="1150786231" fg:w="3391360"/><text x="84.7060%" y="47.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,392,519 samples, 0.25%)</title><rect x="84.7049%" y="261" width="0.2490%" height="15" fill="rgb(246,142,3)" fg:x="1154177591" fg:w="3392519"/><text x="84.9549%" y="271.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,922,623 samples, 0.29%)</title><rect x="84.9538%" y="245" width="0.2879%" height="15" fill="rgb(241,25,7)" fg:x="1157570110" fg:w="3922623"/><text x="85.2038%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3,389,387 samples, 0.25%)</title><rect x="85.2417%" y="245" width="0.2487%" height="15" fill="rgb(242,119,39)" fg:x="1161492733" fg:w="3389387"/><text x="85.4917%" y="255.50"></text></g><g><title>?? (20,449,656 samples, 1.50%)</title><rect x="85.4905%" y="229" width="1.5008%" height="15" fill="rgb(241,98,45)" fg:x="1164882120" fg:w="20449656"/><text x="85.7405%" y="239.50"></text></g><g><title>hashbrown::raw::is_full (20,449,656 samples, 1.50%)</title><rect x="85.4905%" y="213" width="1.5008%" height="15" fill="rgb(254,28,30)" fg:x="1164882120" fg:w="20449656"/><text x="85.7405%" y="223.50"></text></g><g><title>?? (30,757,165 samples, 2.26%)</title><rect x="85.4905%" y="245" width="2.2573%" height="15" fill="rgb(241,142,54)" fg:x="1164882120" fg:w="30757165"/><text x="85.7405%" y="255.50">??</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10,307,509 samples, 0.76%)</title><rect x="86.9913%" y="229" width="0.7565%" height="15" fill="rgb(222,85,15)" fg:x="1185331776" fg:w="10307509"/><text x="87.2413%" y="239.50"></text></g><g><title>?? (79,414,359 samples, 5.83%)</title><rect x="84.7049%" y="277" width="5.8282%" height="15" fill="rgb(210,85,47)" fg:x="1154177591" fg:w="79414359"/><text x="84.9549%" y="287.50">??</text></g><g><title>?? (76,021,840 samples, 5.58%)</title><rect x="84.9538%" y="261" width="5.5792%" height="15" fill="rgb(224,206,25)" fg:x="1157570110" fg:w="76021840"/><text x="85.2038%" y="271.50">??</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (37,952,665 samples, 2.79%)</title><rect x="87.7477%" y="245" width="2.7853%" height="15" fill="rgb(243,201,19)" fg:x="1195639285" fg:w="37952665"/><text x="87.9977%" y="255.50">co..</text></g><g><title>core::ptr::write (37,952,665 samples, 2.79%)</title><rect x="87.7477%" y="229" width="2.7853%" height="15" fill="rgb(236,59,4)" fg:x="1195639285" fg:w="37952665"/><text x="87.9977%" y="239.50">co..</text></g><g><title>[unknown] (13,577,596 samples, 1.00%)</title><rect x="89.5366%" y="213" width="0.9965%" height="15" fill="rgb(254,179,45)" fg:x="1220014354" fg:w="13577596"/><text x="89.7866%" y="223.50"></text></g><g><title>[unknown] (10,179,538 samples, 0.75%)</title><rect x="89.7860%" y="197" width="0.7471%" height="15" fill="rgb(226,14,10)" fg:x="1223412412" fg:w="10179538"/><text x="90.0360%" y="207.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="181" width="0.4979%" height="15" fill="rgb(244,27,41)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="191.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="165" width="0.4979%" height="15" fill="rgb(235,35,32)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="175.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="149" width="0.4979%" height="15" fill="rgb(218,68,31)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="159.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="133" width="0.4979%" height="15" fill="rgb(207,120,37)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="143.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="117" width="0.4979%" height="15" fill="rgb(227,98,0)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="127.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="101" width="0.4979%" height="15" fill="rgb(207,7,3)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="111.50"></text></g><g><title>[unknown] (6,784,815 samples, 0.50%)</title><rect x="90.0351%" y="85" width="0.4979%" height="15" fill="rgb(206,98,19)" fg:x="1226807135" fg:w="6784815"/><text x="90.2851%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6,831,779 samples, 0.50%)</title><rect x="90.5331%" y="197" width="0.5014%" height="15" fill="rgb(217,5,26)" fg:x="1233591950" fg:w="6831779"/><text x="90.7831%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,831,779 samples, 0.50%)</title><rect x="90.5331%" y="181" width="0.5014%" height="15" fill="rgb(235,190,38)" fg:x="1233591950" fg:w="6831779"/><text x="90.7831%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10,227,012 samples, 0.75%)</title><rect x="90.5331%" y="213" width="0.7506%" height="15" fill="rgb(247,86,24)" fg:x="1233591950" fg:w="10227012"/><text x="90.7831%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,395,233 samples, 0.25%)</title><rect x="91.0344%" y="197" width="0.2492%" height="15" fill="rgb(205,101,16)" fg:x="1240423729" fg:w="3395233"/><text x="91.2844%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,395,233 samples, 0.25%)</title><rect x="91.0344%" y="181" width="0.2492%" height="15" fill="rgb(246,168,33)" fg:x="1240423729" fg:w="3395233"/><text x="91.2844%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (13,617,872 samples, 1.00%)</title><rect x="90.5331%" y="245" width="0.9994%" height="15" fill="rgb(231,114,1)" fg:x="1233591950" fg:w="13617872"/><text x="90.7831%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13,617,872 samples, 1.00%)</title><rect x="90.5331%" y="229" width="0.9994%" height="15" fill="rgb(207,184,53)" fg:x="1233591950" fg:w="13617872"/><text x="90.7831%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,390,860 samples, 0.25%)</title><rect x="91.2836%" y="213" width="0.2489%" height="15" fill="rgb(224,95,51)" fg:x="1243818962" fg:w="3390860"/><text x="91.5336%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,392,229 samples, 0.25%)</title><rect x="91.5325%" y="245" width="0.2490%" height="15" fill="rgb(212,188,45)" fg:x="1247209822" fg:w="3392229"/><text x="91.7825%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,637,375 samples, 0.27%)</title><rect x="91.7814%" y="133" width="0.2669%" height="15" fill="rgb(223,154,38)" fg:x="1250602051" fg:w="3637375"/><text x="92.0314%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="469" width="8.8408%" height="15" fill="rgb(251,22,52)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="479.50">serde::de::i..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="453" width="8.8408%" height="15" fill="rgb(229,209,22)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="463.50">&lt;&amp;mut bincod..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="437" width="8.8408%" height="15" fill="rgb(234,138,34)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="447.50">&lt;&amp;mut bincod..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="421" width="8.8408%" height="15" fill="rgb(212,95,11)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="431.50">&lt;serde::de::..</text></g><g><title>serde::de::SeqAccess::next_element (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="405" width="8.8408%" height="15" fill="rgb(240,179,47)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="415.50">serde::de::S..</text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="389" width="8.8408%" height="15" fill="rgb(240,163,11)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="399.50">&lt;&lt;&amp;mut binco..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="373" width="8.8408%" height="15" fill="rgb(236,37,12)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="383.50">&lt;core::marke..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="357" width="8.8408%" height="15" fill="rgb(232,164,16)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="367.50">serde::de::i..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="341" width="8.8408%" height="15" fill="rgb(244,205,15)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="351.50">&lt;&amp;mut bincod..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (120,463,063 samples, 8.84%)</title><rect x="83.4579%" y="325" width="8.8408%" height="15" fill="rgb(223,117,47)" fg:x="1137187385" fg:w="120463063"/><text x="83.7079%" y="335.50">&lt;serde::de::..</text></g><g><title>?? (103,472,857 samples, 7.59%)</title><rect x="84.7049%" y="309" width="7.5939%" height="15" fill="rgb(244,107,35)" fg:x="1154177591" fg:w="103472857"/><text x="84.9549%" y="319.50">??</text></g><g><title>?? (103,472,857 samples, 7.59%)</title><rect x="84.7049%" y="293" width="7.5939%" height="15" fill="rgb(205,140,8)" fg:x="1154177591" fg:w="103472857"/><text x="84.9549%" y="303.50">??</text></g><g><title>hashbrown::map::make_hash (24,058,498 samples, 1.77%)</title><rect x="90.5331%" y="277" width="1.7656%" height="15" fill="rgb(228,84,46)" fg:x="1233591950" fg:w="24058498"/><text x="90.7831%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24,058,498 samples, 1.77%)</title><rect x="90.5331%" y="261" width="1.7656%" height="15" fill="rgb(254,188,9)" fg:x="1233591950" fg:w="24058498"/><text x="90.7831%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="245" width="0.5173%" height="15" fill="rgb(206,112,54)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="229" width="0.5173%" height="15" fill="rgb(216,84,49)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="213" width="0.5173%" height="15" fill="rgb(214,194,35)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="197" width="0.5173%" height="15" fill="rgb(249,28,3)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="181" width="0.5173%" height="15" fill="rgb(222,56,52)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="165" width="0.5173%" height="15" fill="rgb(245,217,50)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,048,397 samples, 0.52%)</title><rect x="91.7814%" y="149" width="0.5173%" height="15" fill="rgb(213,201,24)" fg:x="1250602051" fg:w="7048397"/><text x="92.0314%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,411,022 samples, 0.25%)</title><rect x="92.0484%" y="133" width="0.2503%" height="15" fill="rgb(248,116,28)" fg:x="1254239426" fg:w="3411022"/><text x="92.2984%" y="143.50"></text></g><g><title>?? (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="309" width="0.3021%" height="15" fill="rgb(219,72,43)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="319.50"></text></g><g><title>core::ptr::write (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="293" width="0.3021%" height="15" fill="rgb(209,138,14)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="303.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="277" width="0.3021%" height="15" fill="rgb(222,18,33)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="287.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="261" width="0.3021%" height="15" fill="rgb(213,199,7)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="271.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="245" width="0.3021%" height="15" fill="rgb(250,110,10)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="255.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="229" width="0.3021%" height="15" fill="rgb(248,123,6)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="239.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="213" width="0.3021%" height="15" fill="rgb(206,91,31)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="223.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="197" width="0.3021%" height="15" fill="rgb(211,154,13)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="207.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="181" width="0.3021%" height="15" fill="rgb(225,148,7)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="191.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="165" width="0.3021%" height="15" fill="rgb(220,160,43)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="175.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="149" width="0.3021%" height="15" fill="rgb(213,52,39)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="159.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="133" width="0.3021%" height="15" fill="rgb(243,137,7)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="143.50"></text></g><g><title>[unknown] (4,115,778 samples, 0.30%)</title><rect x="92.2987%" y="117" width="0.3021%" height="15" fill="rgb(230,79,13)" fg:x="1257650448" fg:w="4115778"/><text x="92.5487%" y="127.50"></text></g><g><title>bincode::deserialize (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="773" width="10.3255%" height="15" fill="rgb(247,105,23)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="783.50">bincode::deseri..</text></g><g><title>bincode::config::Options::deserialize (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="757" width="10.3255%" height="15" fill="rgb(223,179,41)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="767.50">bincode::config..</text></g><g><title>bincode::internal::deserialize (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="741" width="10.3255%" height="15" fill="rgb(218,9,34)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="751.50">bincode::intern..</text></g><g><title>bincode::internal::deserialize_seed (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="725" width="10.3255%" height="15" fill="rgb(222,106,8)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="735.50">bincode::intern..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="709" width="10.3255%" height="15" fill="rgb(211,220,0)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="719.50">&lt;core::marker::..</text></g><g><title>motif_finder::data_struct::_::&lt;impl serde::de::Deserialize for motif_finder::data_struct::AllData&gt;::deserialize (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="693" width="10.3255%" height="15" fill="rgb(229,52,16)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="703.50">motif_finder::d..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="677" width="10.3255%" height="15" fill="rgb(212,155,18)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="687.50">&lt;&amp;mut bincode::..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="661" width="10.3255%" height="15" fill="rgb(242,21,14)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="671.50">&lt;&amp;mut bincode::..</text></g><g><title>&lt;motif_finder::data_struct::_::&lt;impl serde::de::Deserialize for motif_finder::data_struct::AllData&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="645" width="10.3255%" height="15" fill="rgb(222,19,48)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="655.50">&lt;motif_finder::..</text></g><g><title>serde::de::SeqAccess::next_element (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="629" width="10.3255%" height="15" fill="rgb(232,45,27)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="639.50">serde::de::SeqA..</text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="613" width="10.3255%" height="15" fill="rgb(249,103,42)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="623.50">&lt;&lt;&amp;mut bincode:..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (140,694,519 samples, 10.33%)</title><rect x="82.9596%" y="597" width="10.3255%" height="15" fill="rgb(246,81,33)" fg:x="1130396402" fg:w="140694519"/><text x="83.2096%" y="607.50">&lt;core::marker::..</text></g><g><title>motif_finder::sequence::_::&lt;impl serde::de::Deserialize for motif_finder::sequence::Sequence&gt;::deserialize (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="581" width="9.8272%" height="15" fill="rgb(252,33,42)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="591.50">motif_finder::..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="565" width="9.8272%" height="15" fill="rgb(209,212,41)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="575.50">&lt;&amp;mut bincode:..</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="549" width="9.8272%" height="15" fill="rgb(207,154,6)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="559.50">&lt;&amp;mut bincode:..</text></g><g><title>&lt;motif_finder::sequence::_::&lt;impl serde::de::Deserialize for motif_finder::sequence::Sequence&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="533" width="9.8272%" height="15" fill="rgb(223,64,47)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="543.50">&lt;motif_finder:..</text></g><g><title>serde::de::SeqAccess::next_element (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="517" width="9.8272%" height="15" fill="rgb(211,161,38)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="527.50">serde::de::Seq..</text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="501" width="9.8272%" height="15" fill="rgb(219,138,40)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="511.50">&lt;&lt;&amp;mut bincode..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (133,903,536 samples, 9.83%)</title><rect x="83.4579%" y="485" width="9.8272%" height="15" fill="rgb(241,228,46)" fg:x="1137187385" fg:w="133903536"/><text x="83.7079%" y="495.50">&lt;core::marker:..</text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for [T: 13]&gt;::deserialize (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="469" width="0.9864%" height="15" fill="rgb(223,209,38)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="453" width="0.9864%" height="15" fill="rgb(236,164,45)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="463.50"></text></g><g><title>&lt;serde::de::impls::ArrayVisitor&lt;[T: 13]&gt; as serde::de::Visitor&gt;::visit_seq (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="437" width="0.9864%" height="15" fill="rgb(231,15,5)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="447.50"></text></g><g><title>serde::de::SeqAccess::next_element (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="421" width="0.9864%" height="15" fill="rgb(252,35,15)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="431.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="405" width="0.9864%" height="15" fill="rgb(248,181,18)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="389" width="0.9864%" height="15" fill="rgb(233,39,42)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="373" width="0.9864%" height="15" fill="rgb(238,110,33)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="383.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="357" width="0.9864%" height="15" fill="rgb(233,195,10)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="341" width="0.9864%" height="15" fill="rgb(254,105,3)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (13,440,473 samples, 0.99%)</title><rect x="92.2987%" y="325" width="0.9864%" height="15" fill="rgb(221,225,9)" fg:x="1257650448" fg:w="13440473"/><text x="92.5487%" y="335.50"></text></g><g><title>serde::de::SeqAccess::next_element (9,324,695 samples, 0.68%)</title><rect x="92.6008%" y="309" width="0.6843%" height="15" fill="rgb(224,227,45)" fg:x="1261766226" fg:w="9324695"/><text x="92.8508%" y="319.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="293" width="0.3224%" height="15" fill="rgb(229,198,43)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="303.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="277" width="0.3224%" height="15" fill="rgb(206,209,35)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="261" width="0.3224%" height="15" fill="rgb(245,195,53)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="271.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="245" width="0.3224%" height="15" fill="rgb(240,92,26)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="255.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="229" width="0.3224%" height="15" fill="rgb(207,40,23)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="239.50"></text></g><g><title>?? (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="213" width="0.3224%" height="15" fill="rgb(223,111,35)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="223.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="197" width="0.3224%" height="15" fill="rgb(229,147,28)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="207.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="181" width="0.3224%" height="15" fill="rgb(211,29,28)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="191.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4,393,660 samples, 0.32%)</title><rect x="92.9626%" y="165" width="0.3224%" height="15" fill="rgb(228,72,33)" fg:x="1266697261" fg:w="4393660"/><text x="93.2126%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="773" width="0.4977%" height="15" fill="rgb(205,214,31)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="757" width="0.4977%" height="15" fill="rgb(224,111,15)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="741" width="0.4977%" height="15" fill="rgb(253,21,26)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="725" width="0.4977%" height="15" fill="rgb(245,139,43)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="709" width="0.4977%" height="15" fill="rgb(252,170,7)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="719.50"></text></g><g><title>__rdl_dealloc (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="693" width="0.4977%" height="15" fill="rgb(231,118,14)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="677" width="0.4977%" height="15" fill="rgb(238,83,0)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="687.50"></text></g><g><title>__GI_munmap (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="661" width="0.4977%" height="15" fill="rgb(221,39,39)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="671.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="645" width="0.4977%" height="15" fill="rgb(222,119,46)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="655.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="629" width="0.4977%" height="15" fill="rgb(222,165,49)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="639.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="613" width="0.4977%" height="15" fill="rgb(219,113,52)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="623.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="597" width="0.4977%" height="15" fill="rgb(214,7,15)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="607.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="581" width="0.4977%" height="15" fill="rgb(235,32,4)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="591.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="565" width="0.4977%" height="15" fill="rgb(238,90,54)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="575.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="549" width="0.4977%" height="15" fill="rgb(213,208,19)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="559.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="533" width="0.4977%" height="15" fill="rgb(233,156,4)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="543.50"></text></g><g><title>[unknown] (6,781,096 samples, 0.50%)</title><rect x="93.2851%" y="517" width="0.4977%" height="15" fill="rgb(207,194,5)" fg:x="1271090921" fg:w="6781096"/><text x="93.5351%" y="527.50"></text></g><g><title>[unknown] (3,384,488 samples, 0.25%)</title><rect x="93.5344%" y="501" width="0.2484%" height="15" fill="rgb(206,111,30)" fg:x="1274487529" fg:w="3384488"/><text x="93.7844%" y="511.50"></text></g><g><title>[unknown] (3,384,488 samples, 0.25%)</title><rect x="93.5344%" y="485" width="0.2484%" height="15" fill="rgb(243,70,54)" fg:x="1274487529" fg:w="3384488"/><text x="93.7844%" y="495.50"></text></g><g><title>metropolis::main (1,341,233,681 samples, 98.43%)</title><rect x="0.8142%" y="805" width="98.4329%" height="15" fill="rgb(242,28,8)" fg:x="11093746" fg:w="1341233681"/><text x="1.0642%" y="815.50">metropolis::main</text></g><g><title>motif_finder::data_struct::AllData::create_inference_data (221,931,025 samples, 16.29%)</title><rect x="82.9596%" y="789" width="16.2875%" height="15" fill="rgb(219,106,18)" fg:x="1130396402" fg:w="221931025"/><text x="83.2096%" y="799.50">motif_finder::data_struct..</text></g><g><title>std::io::default_read_to_end (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="773" width="5.4643%" height="15" fill="rgb(244,222,10)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="783.50">std::io..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="757" width="5.4643%" height="15" fill="rgb(236,179,52)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="767.50">&lt;&amp;std::..</text></g><g><title>std::sys::unix::fs::File::read_buf (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="741" width="5.4643%" height="15" fill="rgb(213,23,39)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="751.50">std::sy..</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="725" width="5.4643%" height="15" fill="rgb(238,48,10)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="735.50">std::sy..</text></g><g><title>__libc_read (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="709" width="5.4643%" height="15" fill="rgb(251,196,23)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="719.50">__libc_..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="693" width="5.4643%" height="15" fill="rgb(250,152,24)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="703.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="677" width="5.4643%" height="15" fill="rgb(209,150,17)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="687.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="661" width="5.4643%" height="15" fill="rgb(234,202,34)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="671.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="645" width="5.4643%" height="15" fill="rgb(253,148,53)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="655.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="629" width="5.4643%" height="15" fill="rgb(218,129,16)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="639.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="613" width="5.4643%" height="15" fill="rgb(216,85,19)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="623.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="597" width="5.4643%" height="15" fill="rgb(235,228,7)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="607.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="581" width="5.4643%" height="15" fill="rgb(245,175,0)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="591.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="565" width="5.4643%" height="15" fill="rgb(208,168,36)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="575.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="549" width="5.4643%" height="15" fill="rgb(246,171,24)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="559.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="533" width="5.4643%" height="15" fill="rgb(215,142,24)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="543.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="517" width="5.4643%" height="15" fill="rgb(250,187,7)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="527.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="501" width="5.4643%" height="15" fill="rgb(228,66,33)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="511.50">[unknow..</text></g><g><title>[unknown] (74,455,410 samples, 5.46%)</title><rect x="93.7828%" y="485" width="5.4643%" height="15" fill="rgb(234,215,21)" fg:x="1277872017" fg:w="74455410"/><text x="94.0328%" y="495.50">[unknow..</text></g><g><title>[unknown] (69,035,678 samples, 5.07%)</title><rect x="94.1805%" y="469" width="5.0665%" height="15" fill="rgb(222,191,20)" fg:x="1283291749" fg:w="69035678"/><text x="94.4305%" y="479.50">[unkno..</text></g><g><title>[unknown] (46,291,356 samples, 3.40%)</title><rect x="95.8497%" y="453" width="3.3973%" height="15" fill="rgb(245,79,54)" fg:x="1306036071" fg:w="46291356"/><text x="96.0997%" y="463.50">[un..</text></g><g><title>[unknown] (46,291,356 samples, 3.40%)</title><rect x="95.8497%" y="437" width="3.3973%" height="15" fill="rgb(240,10,37)" fg:x="1306036071" fg:w="46291356"/><text x="96.0997%" y="447.50">[un..</text></g><g><title>[unknown] (46,291,356 samples, 3.40%)</title><rect x="95.8497%" y="421" width="3.3973%" height="15" fill="rgb(214,192,32)" fg:x="1306036071" fg:w="46291356"/><text x="96.0997%" y="431.50">[un..</text></g><g><title>[unknown] (34,381,902 samples, 2.52%)</title><rect x="96.7237%" y="405" width="2.5233%" height="15" fill="rgb(209,36,54)" fg:x="1317945525" fg:w="34381902"/><text x="96.9737%" y="415.50">[u..</text></g><g><title>[unknown] (27,350,835 samples, 2.01%)</title><rect x="97.2398%" y="389" width="2.0073%" height="15" fill="rgb(220,10,11)" fg:x="1324976592" fg:w="27350835"/><text x="97.4898%" y="399.50">[..</text></g><g><title>[unknown] (15,648,353 samples, 1.15%)</title><rect x="98.0986%" y="373" width="1.1484%" height="15" fill="rgb(221,106,17)" fg:x="1336679074" fg:w="15648353"/><text x="98.3486%" y="383.50"></text></g><g><title>[unknown] (15,648,353 samples, 1.15%)</title><rect x="98.0986%" y="357" width="1.1484%" height="15" fill="rgb(251,142,44)" fg:x="1336679074" fg:w="15648353"/><text x="98.3486%" y="367.50"></text></g><g><title>[unknown] (7,865,137 samples, 0.58%)</title><rect x="98.6698%" y="341" width="0.5772%" height="15" fill="rgb(238,13,15)" fg:x="1344462290" fg:w="7865137"/><text x="98.9198%" y="351.50"></text></g><g><title>[unknown] (7,865,137 samples, 0.58%)</title><rect x="98.6698%" y="325" width="0.5772%" height="15" fill="rgb(208,107,27)" fg:x="1344462290" fg:w="7865137"/><text x="98.9198%" y="335.50"></text></g><g><title>[unknown] (7,865,137 samples, 0.58%)</title><rect x="98.6698%" y="309" width="0.5772%" height="15" fill="rgb(205,136,37)" fg:x="1344462290" fg:w="7865137"/><text x="98.9198%" y="319.50"></text></g><g><title>metropolis (1,362,234,668 samples, 99.97%)</title><rect x="0.0000%" y="821" width="99.9741%" height="15" fill="rgb(250,205,27)" fg:x="0" fg:w="1362234668"/><text x="0.2500%" y="831.50">metropolis</text></g><g><title>regex_automata::meta::strategy::new (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="805" width="0.7271%" height="15" fill="rgb(210,80,43)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="815.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="789" width="0.7271%" height="15" fill="rgb(247,160,36)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="773" width="0.7271%" height="15" fill="rgb(234,13,49)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="783.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="757" width="0.7271%" height="15" fill="rgb(234,122,0)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="767.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="741" width="0.7271%" height="15" fill="rgb(207,146,38)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="751.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="725" width="0.7271%" height="15" fill="rgb(207,177,25)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="735.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="709" width="0.7271%" height="15" fill="rgb(211,178,42)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="719.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="693" width="0.7271%" height="15" fill="rgb(230,69,54)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="703.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9,907,241 samples, 0.73%)</title><rect x="99.2470%" y="677" width="0.7271%" height="15" fill="rgb(214,135,41)" fg:x="1352327427" fg:w="9907241"/><text x="99.4970%" y="687.50"></text></g><g><title>all (1,362,587,303 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(237,67,25)" fg:x="0" fg:w="1362587303"/><text x="0.2500%" y="847.50"></text></g><g><title>perf-exec (352,635 samples, 0.03%)</title><rect x="99.9741%" y="821" width="0.0259%" height="15" fill="rgb(222,189,50)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="831.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="805" width="0.0259%" height="15" fill="rgb(245,148,34)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="815.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="789" width="0.0259%" height="15" fill="rgb(222,29,6)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="799.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="773" width="0.0259%" height="15" fill="rgb(221,189,43)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="783.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="757" width="0.0259%" height="15" fill="rgb(207,36,27)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="767.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="741" width="0.0259%" height="15" fill="rgb(217,90,24)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="751.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="725" width="0.0259%" height="15" fill="rgb(224,66,35)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="735.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="709" width="0.0259%" height="15" fill="rgb(221,13,50)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="719.50"></text></g><g><title>[unknown] (352,635 samples, 0.03%)</title><rect x="99.9741%" y="693" width="0.0259%" height="15" fill="rgb(236,68,49)" fg:x="1362234668" fg:w="352635"/><text x="100.2241%" y="703.50"></text></g><g><title>[unknown] (343,234 samples, 0.03%)</title><rect x="99.9748%" y="677" width="0.0252%" height="15" fill="rgb(229,146,28)" fg:x="1362244069" fg:w="343234"/><text x="100.2248%" y="687.50"></text></g><g><title>[unknown] (343,234 samples, 0.03%)</title><rect x="99.9748%" y="661" width="0.0252%" height="15" fill="rgb(225,31,38)" fg:x="1362244069" fg:w="343234"/><text x="100.2248%" y="671.50"></text></g></svg></svg>