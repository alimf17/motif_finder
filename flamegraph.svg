<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="15873"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="0.0126%" y="133" width="0.0378%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="6"/><text x="0.2626%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (80 samples, 0.50%)</title><rect x="0.0504%" y="133" width="0.5040%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="80"/><text x="0.3004%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (97 samples, 0.61%)</title><rect x="0.5544%" y="133" width="0.6111%" height="15" fill="rgb(221,193,54)" fg:x="88" fg:w="97"/><text x="0.8044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.03%)</title><rect x="1.1655%" y="133" width="0.0315%" height="15" fill="rgb(248,212,6)" fg:x="185" fg:w="5"/><text x="1.4155%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.03%)</title><rect x="1.1655%" y="117" width="0.0315%" height="15" fill="rgb(208,68,35)" fg:x="185" fg:w="5"/><text x="1.4155%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.03%)</title><rect x="1.1655%" y="101" width="0.0315%" height="15" fill="rgb(232,128,0)" fg:x="185" fg:w="5"/><text x="1.4155%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (79 samples, 0.50%)</title><rect x="1.2033%" y="133" width="0.4977%" height="15" fill="rgb(207,160,47)" fg:x="191" fg:w="79"/><text x="1.4533%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (63 samples, 0.40%)</title><rect x="1.7010%" y="133" width="0.3969%" height="15" fill="rgb(228,23,34)" fg:x="270" fg:w="63"/><text x="1.9510%" y="143.50"></text></g><g><title>motif_finder`&lt;&amp;motif_finder::waveform::Waveform as core::ops::arith::Add&lt;&amp;motif_finder::waveform::Waveform&gt;&gt;::add (2 samples, 0.01%)</title><rect x="2.1042%" y="133" width="0.0126%" height="15" fill="rgb(218,30,26)" fg:x="334" fg:w="2"/><text x="2.3542%" y="143.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="2.1042%" y="117" width="0.0126%" height="15" fill="rgb(220,122,19)" fg:x="334" fg:w="2"/><text x="2.3542%" y="127.50"></text></g><g><title>motif_finder`&lt;&amp;motif_finder::waveform::Waveform as core::ops::arith::Sub&lt;&amp;motif_finder::waveform::Waveform&gt;&gt;::sub (2 samples, 0.01%)</title><rect x="2.1168%" y="133" width="0.0126%" height="15" fill="rgb(250,228,42)" fg:x="336" fg:w="2"/><text x="2.3668%" y="143.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="2.1168%" y="117" width="0.0126%" height="15" fill="rgb(240,193,28)" fg:x="336" fg:w="2"/><text x="2.3668%" y="127.50"></text></g><g><title>motif_finder`DYLD-STUB$$free (74 samples, 0.47%)</title><rect x="2.1357%" y="133" width="0.4662%" height="15" fill="rgb(216,20,37)" fg:x="339" fg:w="74"/><text x="2.3857%" y="143.50"></text></g><g><title>motif_finder`DYLD-STUB$$malloc (7 samples, 0.04%)</title><rect x="2.6019%" y="133" width="0.0441%" height="15" fill="rgb(206,188,39)" fg:x="413" fg:w="7"/><text x="2.8519%" y="143.50"></text></g><g><title>motif_finder`__rdl_alloc (9 samples, 0.06%)</title><rect x="2.6460%" y="133" width="0.0567%" height="15" fill="rgb(217,207,13)" fg:x="420" fg:w="9"/><text x="2.8960%" y="143.50"></text></g><g><title>motif_finder`__rdl_dealloc (9 samples, 0.06%)</title><rect x="2.7027%" y="133" width="0.0567%" height="15" fill="rgb(231,73,38)" fg:x="429" fg:w="9"/><text x="2.9527%" y="143.50"></text></g><g><title>motif_finder`__rust_dealloc (2 samples, 0.01%)</title><rect x="2.7594%" y="133" width="0.0126%" height="15" fill="rgb(225,20,46)" fg:x="438" fg:w="2"/><text x="3.0094%" y="143.50"></text></g><g><title>motif_finder`motif_finder::base::Motif::generate_waveform (83 samples, 0.52%)</title><rect x="2.7783%" y="133" width="0.5229%" height="15" fill="rgb(210,31,41)" fg:x="441" fg:w="83"/><text x="3.0283%" y="143.50"></text></g><g><title>motif_finder`motif_finder::base::Motif::return_bind_score (77 samples, 0.49%)</title><rect x="2.8161%" y="117" width="0.4851%" height="15" fill="rgb(221,200,47)" fg:x="447" fg:w="77"/><text x="3.0661%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.01%)</title><rect x="3.2886%" y="101" width="0.0126%" height="15" fill="rgb(226,26,5)" fg:x="522" fg:w="2"/><text x="3.5386%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="3.2886%" y="85" width="0.0126%" height="15" fill="rgb(249,33,26)" fg:x="522" fg:w="2"/><text x="3.5386%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.01%)</title><rect x="3.2886%" y="69" width="0.0126%" height="15" fill="rgb(235,183,28)" fg:x="522" fg:w="2"/><text x="3.5386%" y="79.50"></text></g><g><title>motif_finder`motif_finder::base::Motif::return_bind_score (42 samples, 0.26%)</title><rect x="3.3012%" y="133" width="0.2646%" height="15" fill="rgb(221,5,38)" fg:x="524" fg:w="42"/><text x="3.5512%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.03%)</title><rect x="3.5406%" y="117" width="0.0252%" height="15" fill="rgb(247,18,42)" fg:x="562" fg:w="4"/><text x="3.7906%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="3.5406%" y="101" width="0.0252%" height="15" fill="rgb(241,131,45)" fg:x="562" fg:w="4"/><text x="3.7906%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.03%)</title><rect x="3.5406%" y="85" width="0.0252%" height="15" fill="rgb(249,31,29)" fg:x="562" fg:w="4"/><text x="3.7906%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.18%)</title><rect x="48.7620%" y="117" width="0.1827%" height="15" fill="rgb(225,111,53)" fg:x="7740" fg:w="29"/><text x="49.0120%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_large (441 samples, 2.78%)</title><rect x="48.9510%" y="117" width="2.7783%" height="15" fill="rgb(238,160,17)" fg:x="7770" fg:w="441"/><text x="49.2010%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (441 samples, 2.78%)</title><rect x="48.9510%" y="101" width="2.7783%" height="15" fill="rgb(214,148,48)" fg:x="7770" fg:w="441"/><text x="49.2010%" y="111.50">li..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (441 samples, 2.78%)</title><rect x="48.9510%" y="85" width="2.7783%" height="15" fill="rgb(232,36,49)" fg:x="7770" fg:w="441"/><text x="49.2010%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.09%)</title><rect x="51.7294%" y="117" width="0.0945%" height="15" fill="rgb(209,103,24)" fg:x="8211" fg:w="15"/><text x="51.9794%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.09%)</title><rect x="51.7294%" y="101" width="0.0945%" height="15" fill="rgb(229,88,8)" fg:x="8211" fg:w="15"/><text x="51.9794%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (132 samples, 0.83%)</title><rect x="51.8239%" y="117" width="0.8316%" height="15" fill="rgb(213,181,19)" fg:x="8226" fg:w="132"/><text x="52.0739%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="52.6555%" y="101" width="0.0189%" height="15" fill="rgb(254,191,54)" fg:x="8358" fg:w="3"/><text x="52.9055%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="52.6555%" y="85" width="0.0189%" height="15" fill="rgb(241,83,37)" fg:x="8358" fg:w="3"/><text x="52.9055%" y="95.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (320 samples, 2.02%)</title><rect x="52.6555%" y="117" width="2.0160%" height="15" fill="rgb(233,36,39)" fg:x="8358" fg:w="320"/><text x="52.9055%" y="127.50">m..</text></g><g><title>motif_finder`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (317 samples, 2.00%)</title><rect x="52.6744%" y="101" width="1.9971%" height="15" fill="rgb(226,3,54)" fg:x="8361" fg:w="317"/><text x="52.9244%" y="111.50">m..</text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.13%)</title><rect x="54.5392%" y="85" width="0.1323%" height="15" fill="rgb(245,192,40)" fg:x="8657" fg:w="21"/><text x="54.7892%" y="95.50"></text></g><g><title>motif_finder`motif_finder::base::Motif::return_bind_score (40 samples, 0.25%)</title><rect x="54.6715%" y="117" width="0.2520%" height="15" fill="rgb(238,167,29)" fg:x="8678" fg:w="40"/><text x="54.9215%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="54.9046%" y="101" width="0.0189%" height="15" fill="rgb(232,182,51)" fg:x="8715" fg:w="3"/><text x="55.1546%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="54.9046%" y="85" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="8715" fg:w="3"/><text x="55.1546%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.02%)</title><rect x="54.9046%" y="69" width="0.0189%" height="15" fill="rgb(208,69,12)" fg:x="8715" fg:w="3"/><text x="55.1546%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.06%)</title><rect x="55.4653%" y="101" width="0.0567%" height="15" fill="rgb(235,93,37)" fg:x="8804" fg:w="9"/><text x="55.7153%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.06%)</title><rect x="55.4653%" y="85" width="0.0567%" height="15" fill="rgb(213,116,39)" fg:x="8804" fg:w="9"/><text x="55.7153%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.06%)</title><rect x="55.4653%" y="69" width="0.0567%" height="15" fill="rgb(222,207,29)" fg:x="8804" fg:w="9"/><text x="55.7153%" y="79.50"></text></g><g><title>libsystem_m.dylib`log (306 samples, 1.93%)</title><rect x="57.0466%" y="85" width="1.9278%" height="15" fill="rgb(206,96,30)" fg:x="9055" fg:w="306"/><text x="57.2966%" y="95.50">l..</text></g><g><title>motif_finder`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (558 samples, 3.52%)</title><rect x="55.5220%" y="101" width="3.5154%" height="15" fill="rgb(218,138,4)" fg:x="8813" fg:w="558"/><text x="55.7720%" y="111.50">mot..</text></g><g><title>libsystem_malloc.dylib`free_large (10 samples, 0.06%)</title><rect x="58.9744%" y="85" width="0.0630%" height="15" fill="rgb(250,191,14)" fg:x="9361" fg:w="10"/><text x="59.2244%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (10 samples, 0.06%)</title><rect x="58.9744%" y="69" width="0.0630%" height="15" fill="rgb(239,60,40)" fg:x="9361" fg:w="10"/><text x="59.2244%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.06%)</title><rect x="58.9744%" y="53" width="0.0630%" height="15" fill="rgb(206,27,48)" fg:x="9361" fg:w="10"/><text x="59.2244%" y="63.50"></text></g><g><title>motif_finder`DYLD-STUB$$log (34 samples, 0.21%)</title><rect x="59.0374%" y="101" width="0.2142%" height="15" fill="rgb(225,35,8)" fg:x="9371" fg:w="34"/><text x="59.2874%" y="111.50"></text></g><g><title>motif_finder`motif_finder::waveform::Noise::ad_calc (773 samples, 4.87%)</title><rect x="54.9235%" y="117" width="4.8699%" height="15" fill="rgb(250,213,24)" fg:x="8718" fg:w="773"/><text x="55.1735%" y="127.50">motif_..</text></g><g><title>motif_finder`core::slice::sort::recurse (86 samples, 0.54%)</title><rect x="59.2516%" y="101" width="0.5418%" height="15" fill="rgb(247,123,22)" fg:x="9405" fg:w="86"/><text x="59.5016%" y="111.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.04%)</title><rect x="59.7934%" y="101" width="0.0441%" height="15" fill="rgb(231,138,38)" fg:x="9491" fg:w="7"/><text x="60.0434%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (7 samples, 0.04%)</title><rect x="59.7934%" y="85" width="0.0441%" height="15" fill="rgb(231,145,46)" fg:x="9491" fg:w="7"/><text x="60.0434%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.04%)</title><rect x="59.7934%" y="69" width="0.0441%" height="15" fill="rgb(251,118,11)" fg:x="9491" fg:w="7"/><text x="60.0434%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.04%)</title><rect x="59.7934%" y="53" width="0.0441%" height="15" fill="rgb(217,147,25)" fg:x="9491" fg:w="7"/><text x="60.0434%" y="63.50"></text></g><g><title>motif_finder`motif_finder::waveform::Noise::ad_grad (396 samples, 2.49%)</title><rect x="59.7934%" y="117" width="2.4948%" height="15" fill="rgb(247,81,37)" fg:x="9491" fg:w="396"/><text x="60.0434%" y="127.50">mo..</text></g><g><title>motif_finder`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (389 samples, 2.45%)</title><rect x="59.8375%" y="101" width="2.4507%" height="15" fill="rgb(209,12,38)" fg:x="9498" fg:w="389"/><text x="60.0875%" y="111.50">mo..</text></g><g><title>motif_finder`motif_finder::waveform::Waveform::derive_zero (11 samples, 0.07%)</title><rect x="62.2882%" y="117" width="0.0693%" height="15" fill="rgb(227,1,9)" fg:x="9887" fg:w="11"/><text x="62.5382%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (11 samples, 0.07%)</title><rect x="62.2882%" y="101" width="0.0693%" height="15" fill="rgb(248,47,43)" fg:x="9887" fg:w="11"/><text x="62.5382%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.07%)</title><rect x="62.2882%" y="85" width="0.0693%" height="15" fill="rgb(221,10,30)" fg:x="9887" fg:w="11"/><text x="62.5382%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (11 samples, 0.07%)</title><rect x="62.2882%" y="69" width="0.0693%" height="15" fill="rgb(210,229,1)" fg:x="9887" fg:w="11"/><text x="62.5382%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.01%)</title><rect x="62.5780%" y="101" width="0.0126%" height="15" fill="rgb(222,148,37)" fg:x="9933" fg:w="2"/><text x="62.8280%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="62.5780%" y="85" width="0.0126%" height="15" fill="rgb(234,67,33)" fg:x="9933" fg:w="2"/><text x="62.8280%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.01%)</title><rect x="62.5780%" y="69" width="0.0126%" height="15" fill="rgb(247,98,35)" fg:x="9933" fg:w="2"/><text x="62.8280%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2 samples, 0.01%)</title><rect x="62.5780%" y="53" width="0.0126%" height="15" fill="rgb(247,138,52)" fg:x="9933" fg:w="2"/><text x="62.8280%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.01%)</title><rect x="62.5780%" y="37" width="0.0126%" height="15" fill="rgb(213,79,30)" fg:x="9933" fg:w="2"/><text x="62.8280%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.03%)</title><rect x="62.6032%" y="101" width="0.0315%" height="15" fill="rgb(246,177,23)" fg:x="9937" fg:w="5"/><text x="62.8532%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.03%)</title><rect x="62.6032%" y="85" width="0.0315%" height="15" fill="rgb(230,62,27)" fg:x="9937" fg:w="5"/><text x="62.8532%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.16%)</title><rect x="62.6410%" y="101" width="0.1575%" height="15" fill="rgb(216,154,8)" fg:x="9943" fg:w="25"/><text x="62.8910%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.03%)</title><rect x="62.7985%" y="85" width="0.0252%" height="15" fill="rgb(244,35,45)" fg:x="9968" fg:w="4"/><text x="63.0485%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.03%)</title><rect x="62.7985%" y="69" width="0.0252%" height="15" fill="rgb(251,115,12)" fg:x="9968" fg:w="4"/><text x="63.0485%" y="79.50"></text></g><g><title>motif_finder`&lt;&amp;motif_finder::waveform::Waveform as core::ops::arith::Sub&lt;&amp;motif_finder::waveform::Waveform&gt;&gt;::sub (37 samples, 0.23%)</title><rect x="62.7985%" y="101" width="0.2331%" height="15" fill="rgb(240,54,50)" fg:x="9968" fg:w="37"/><text x="63.0485%" y="111.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.21%)</title><rect x="62.8237%" y="85" width="0.2079%" height="15" fill="rgb(233,84,52)" fg:x="9972" fg:w="33"/><text x="63.0737%" y="95.50"></text></g><g><title>motif_finder`motif_finder::base::Motif::single_motif_grad (9,472 samples, 59.67%)</title><rect x="3.5658%" y="133" width="59.6737%" height="15" fill="rgb(207,117,47)" fg:x="566" fg:w="9472"/><text x="3.8158%" y="143.50">motif_finder`motif_finder::base::Motif::single_motif_grad</text></g><g><title>motif_finder`motif_finder::waveform::Waveform::produce_noise (140 samples, 0.88%)</title><rect x="62.3575%" y="117" width="0.8820%" height="15" fill="rgb(249,43,39)" fg:x="9898" fg:w="140"/><text x="62.6075%" y="127.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.21%)</title><rect x="63.0316%" y="101" width="0.2079%" height="15" fill="rgb(209,38,44)" fg:x="10005" fg:w="33"/><text x="63.2816%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.14%)</title><rect x="71.4862%" y="101" width="0.1449%" height="15" fill="rgb(236,212,23)" fg:x="11347" fg:w="23"/><text x="71.7362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (186 samples, 1.17%)</title><rect x="71.9776%" y="85" width="1.1718%" height="15" fill="rgb(242,79,21)" fg:x="11425" fg:w="186"/><text x="72.2276%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (44 samples, 0.28%)</title><rect x="72.8722%" y="69" width="0.2772%" height="15" fill="rgb(211,96,35)" fg:x="11567" fg:w="44"/><text x="73.1222%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (390 samples, 2.46%)</title><rect x="70.8751%" y="117" width="2.4570%" height="15" fill="rgb(253,215,40)" fg:x="11250" fg:w="390"/><text x="71.1251%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (270 samples, 1.70%)</title><rect x="71.6311%" y="101" width="1.7010%" height="15" fill="rgb(211,81,21)" fg:x="11370" fg:w="270"/><text x="71.8811%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.18%)</title><rect x="73.1494%" y="85" width="0.1827%" height="15" fill="rgb(208,190,38)" fg:x="11611" fg:w="29"/><text x="73.3994%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (31 samples, 0.20%)</title><rect x="73.3321%" y="117" width="0.1953%" height="15" fill="rgb(235,213,38)" fg:x="11640" fg:w="31"/><text x="73.5821%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (409 samples, 2.58%)</title><rect x="76.8475%" y="101" width="2.5767%" height="15" fill="rgb(237,122,38)" fg:x="12198" fg:w="409"/><text x="77.0975%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`free (941 samples, 5.93%)</title><rect x="73.5274%" y="117" width="5.9283%" height="15" fill="rgb(244,218,35)" fg:x="11671" fg:w="941"/><text x="73.7774%" y="127.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="79.4242%" y="101" width="0.0315%" height="15" fill="rgb(240,68,47)" fg:x="12607" fg:w="5"/><text x="79.6742%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (42 samples, 0.26%)</title><rect x="79.4557%" y="117" width="0.2646%" height="15" fill="rgb(210,16,53)" fg:x="12612" fg:w="42"/><text x="79.7057%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (313 samples, 1.97%)</title><rect x="79.7203%" y="117" width="1.9719%" height="15" fill="rgb(235,124,12)" fg:x="12654" fg:w="313"/><text x="79.9703%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="81.6922%" y="117" width="0.0315%" height="15" fill="rgb(224,169,11)" fg:x="12967" fg:w="5"/><text x="81.9422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (82 samples, 0.52%)</title><rect x="81.7237%" y="117" width="0.5166%" height="15" fill="rgb(250,166,2)" fg:x="12972" fg:w="82"/><text x="81.9737%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.29%)</title><rect x="82.2403%" y="117" width="0.2898%" height="15" fill="rgb(242,216,29)" fg:x="13054" fg:w="46"/><text x="82.4903%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="82.7443%" y="101" width="0.0126%" height="15" fill="rgb(230,116,27)" fg:x="13134" fg:w="2"/><text x="82.9943%" y="111.50"></text></g><g><title>motif_finder`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (108 samples, 0.68%)</title><rect x="84.2563%" y="85" width="0.6804%" height="15" fill="rgb(228,99,48)" fg:x="13374" fg:w="108"/><text x="84.5063%" y="95.50"></text></g><g><title>motif_finder`core::hash::BuildHasher::hash_one (182 samples, 1.15%)</title><rect x="84.9367%" y="85" width="1.1466%" height="15" fill="rgb(253,11,6)" fg:x="13482" fg:w="182"/><text x="85.1867%" y="95.50"></text></g><g><title>motif_finder`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="86.1211%" y="69" width="0.0126%" height="15" fill="rgb(247,143,39)" fg:x="13670" fg:w="2"/><text x="86.3711%" y="79.50"></text></g><g><title>motif_finder`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (542 samples, 3.41%)</title><rect x="82.7569%" y="101" width="3.4146%" height="15" fill="rgb(236,97,10)" fg:x="13136" fg:w="542"/><text x="83.0069%" y="111.50">mot..</text></g><g><title>motif_finder`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.09%)</title><rect x="86.0833%" y="85" width="0.0882%" height="15" fill="rgb(233,208,19)" fg:x="13664" fg:w="14"/><text x="86.3333%" y="95.50"></text></g><g><title>motif_finder`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="86.1337%" y="69" width="0.0378%" height="15" fill="rgb(216,164,2)" fg:x="13672" fg:w="6"/><text x="86.3837%" y="79.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (590 samples, 3.72%)</title><rect x="82.5301%" y="117" width="3.7170%" height="15" fill="rgb(220,129,5)" fg:x="13100" fg:w="590"/><text x="82.7801%" y="127.50">moti..</text></g><g><title>motif_finder`core::hash::BuildHasher::hash_one (12 samples, 0.08%)</title><rect x="86.1715%" y="101" width="0.0756%" height="15" fill="rgb(242,17,10)" fg:x="13678" fg:w="12"/><text x="86.4215%" y="111.50"></text></g><g><title>motif_finder`DYLD-STUB$$malloc (14 samples, 0.09%)</title><rect x="86.2471%" y="117" width="0.0882%" height="15" fill="rgb(242,107,0)" fg:x="13690" fg:w="14"/><text x="86.4971%" y="127.50"></text></g><g><title>motif_finder`DYLD-STUB$$memcpy (19 samples, 0.12%)</title><rect x="86.3353%" y="117" width="0.1197%" height="15" fill="rgb(251,28,31)" fg:x="13704" fg:w="19"/><text x="86.5853%" y="127.50"></text></g><g><title>motif_finder`__rdl_alloc (11 samples, 0.07%)</title><rect x="86.4550%" y="117" width="0.0693%" height="15" fill="rgb(233,223,10)" fg:x="13723" fg:w="11"/><text x="86.7050%" y="127.50"></text></g><g><title>motif_finder`core::slice::sort::recurse (12 samples, 0.08%)</title><rect x="86.5306%" y="117" width="0.0756%" height="15" fill="rgb(215,21,27)" fg:x="13735" fg:w="12"/><text x="86.7806%" y="127.50"></text></g><g><title>motif_finder`core::slice::sort::recurse (10 samples, 0.06%)</title><rect x="86.5432%" y="101" width="0.0630%" height="15" fill="rgb(232,23,21)" fg:x="13737" fg:w="10"/><text x="86.7932%" y="111.50"></text></g><g><title>motif_finder`core::slice::sort::recurse (10 samples, 0.06%)</title><rect x="86.5432%" y="85" width="0.0630%" height="15" fill="rgb(244,5,23)" fg:x="13737" fg:w="10"/><text x="86.7932%" y="95.50"></text></g><g><title>motif_finder`core::slice::sort::recurse (8 samples, 0.05%)</title><rect x="86.5558%" y="69" width="0.0504%" height="15" fill="rgb(226,81,46)" fg:x="13739" fg:w="8"/><text x="86.8058%" y="79.50"></text></g><g><title>motif_finder`core::slice::sort::recurse (5 samples, 0.03%)</title><rect x="86.5747%" y="53" width="0.0315%" height="15" fill="rgb(247,70,30)" fg:x="13742" fg:w="5"/><text x="86.8247%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (40 samples, 0.25%)</title><rect x="88.0237%" y="85" width="0.2520%" height="15" fill="rgb(212,68,19)" fg:x="13972" fg:w="40"/><text x="88.2737%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (195 samples, 1.23%)</title><rect x="88.5088%" y="69" width="1.2285%" height="15" fill="rgb(240,187,13)" fg:x="14049" fg:w="195"/><text x="88.7588%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.26%)</title><rect x="89.4790%" y="53" width="0.2583%" height="15" fill="rgb(223,113,26)" fg:x="14203" fg:w="41"/><text x="89.7290%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (407 samples, 2.56%)</title><rect x="87.3622%" y="101" width="2.5641%" height="15" fill="rgb(206,192,2)" fg:x="13867" fg:w="407"/><text x="87.6122%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (262 samples, 1.65%)</title><rect x="88.2757%" y="85" width="1.6506%" height="15" fill="rgb(241,108,4)" fg:x="14012" fg:w="262"/><text x="88.5257%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.19%)</title><rect x="89.7373%" y="69" width="0.1890%" height="15" fill="rgb(247,173,49)" fg:x="14244" fg:w="30"/><text x="89.9873%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (45 samples, 0.28%)</title><rect x="89.9263%" y="101" width="0.2835%" height="15" fill="rgb(224,114,35)" fg:x="14274" fg:w="45"/><text x="90.1763%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.09%)</title><rect x="90.2098%" y="101" width="0.0945%" height="15" fill="rgb(245,159,27)" fg:x="14319" fg:w="15"/><text x="90.4598%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.13%)</title><rect x="92.8558%" y="69" width="0.1323%" height="15" fill="rgb(245,172,44)" fg:x="14739" fg:w="21"/><text x="93.1058%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (228 samples, 1.44%)</title><rect x="93.3661%" y="53" width="1.4364%" height="15" fill="rgb(236,23,11)" fg:x="14820" fg:w="228"/><text x="93.6161%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (73 samples, 0.46%)</title><rect x="94.3426%" y="37" width="0.4599%" height="15" fill="rgb(205,117,38)" fg:x="14975" fg:w="73"/><text x="94.5926%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (428 samples, 2.70%)</title><rect x="92.2636%" y="85" width="2.6964%" height="15" fill="rgb(237,72,25)" fg:x="14645" fg:w="428"/><text x="92.5136%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (313 samples, 1.97%)</title><rect x="92.9881%" y="69" width="1.9719%" height="15" fill="rgb(244,70,9)" fg:x="14760" fg:w="313"/><text x="93.2381%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.16%)</title><rect x="94.8025%" y="53" width="0.1575%" height="15" fill="rgb(217,125,39)" fg:x="15048" fg:w="25"/><text x="95.0525%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (27 samples, 0.17%)</title><rect x="94.9600%" y="85" width="0.1701%" height="15" fill="rgb(235,36,10)" fg:x="15073" fg:w="27"/><text x="95.2100%" y="95.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (776 samples, 4.89%)</title><rect x="90.3043%" y="101" width="4.8888%" height="15" fill="rgb(251,123,47)" fg:x="14334" fg:w="776"/><text x="90.5543%" y="111.50">motif_..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.06%)</title><rect x="95.1301%" y="85" width="0.0630%" height="15" fill="rgb(221,13,13)" fg:x="15100" fg:w="10"/><text x="95.3801%" y="95.50"></text></g><g><title>motif_finder`DYLD-STUB$$malloc (13 samples, 0.08%)</title><rect x="95.1931%" y="101" width="0.0819%" height="15" fill="rgb(238,131,9)" fg:x="15110" fg:w="13"/><text x="95.4431%" y="111.50"></text></g><g><title>motif_finder`motif_finder::sequence::Sequence::new_manual (5,098 samples, 32.12%)</title><rect x="63.2395%" y="133" width="32.1174%" height="15" fill="rgb(211,50,8)" fg:x="10038" fg:w="5098"/><text x="63.4895%" y="143.50">motif_finder`motif_finder::sequence::Sequence::new_m..</text></g><g><title>motif_finder`motif_finder::sequence::Sequence::return_bases (1,389 samples, 8.75%)</title><rect x="86.6062%" y="117" width="8.7507%" height="15" fill="rgb(245,182,24)" fg:x="13747" fg:w="1389"/><text x="86.8562%" y="127.50">motif_finder..</text></g><g><title>motif_finder`__rdl_alloc (13 samples, 0.08%)</title><rect x="95.2750%" y="101" width="0.0819%" height="15" fill="rgb(242,14,37)" fg:x="15123" fg:w="13"/><text x="95.5250%" y="111.50"></text></g><g><title>motif_finder`motif_finder::sequence::Sequence::return_bases (3 samples, 0.02%)</title><rect x="95.3569%" y="133" width="0.0189%" height="15" fill="rgb(246,228,12)" fg:x="15136" fg:w="3"/><text x="95.6069%" y="143.50"></text></g><g><title>dyld`start (15,143 samples, 95.40%)</title><rect x="0.0000%" y="229" width="95.4010%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="15143"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>motif_finder`main (15,142 samples, 95.39%)</title><rect x="0.0063%" y="213" width="95.3947%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="15142"/><text x="0.2563%" y="223.50">motif_finder`main</text></g><g><title>motif_finder`std::rt::lang_start_internal (15,142 samples, 95.39%)</title><rect x="0.0063%" y="197" width="95.3947%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="15142"/><text x="0.2563%" y="207.50">motif_finder`std::rt::lang_start_internal</text></g><g><title>motif_finder`std::rt::lang_start::_{{closure}} (15,142 samples, 95.39%)</title><rect x="0.0063%" y="181" width="95.3947%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="15142"/><text x="0.2563%" y="191.50">motif_finder`std::rt::lang_start::_{{closure}}</text></g><g><title>motif_finder`std::sys_common::backtrace::__rust_begin_short_backtrace (15,142 samples, 95.39%)</title><rect x="0.0063%" y="165" width="95.3947%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="15142"/><text x="0.2563%" y="175.50">motif_finder`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>motif_finder`motif_finder::main (15,142 samples, 95.39%)</title><rect x="0.0063%" y="149" width="95.3947%" height="15" fill="rgb(232,18,1)" fg:x="1" fg:w="15142"/><text x="0.2563%" y="159.50">motif_finder`motif_finder::main</text></g><g><title>motif_finder`motif_finder::waveform::Waveform::produce_noise (3 samples, 0.02%)</title><rect x="95.3821%" y="133" width="0.0189%" height="15" fill="rgb(215,41,42)" fg:x="15140" fg:w="3"/><text x="95.6321%" y="143.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="95.3884%" y="117" width="0.0126%" height="15" fill="rgb(224,123,36)" fg:x="15141" fg:w="2"/><text x="95.6384%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.01%)</title><rect x="95.4010%" y="229" width="0.0126%" height="15" fill="rgb(240,125,3)" fg:x="15143" fg:w="2"/><text x="95.6510%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.03%)</title><rect x="95.4136%" y="229" width="0.0252%" height="15" fill="rgb(205,98,50)" fg:x="15145" fg:w="4"/><text x="95.6636%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="95.4514%" y="213" width="0.0126%" height="15" fill="rgb(205,185,37)" fg:x="15151" fg:w="2"/><text x="95.7014%" y="223.50"></text></g><g><title>motif_finder`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="95.4640%" y="213" width="0.0126%" height="15" fill="rgb(238,207,15)" fg:x="15153" fg:w="2"/><text x="95.7140%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (11 samples, 0.07%)</title><rect x="95.4829%" y="197" width="0.0693%" height="15" fill="rgb(213,199,42)" fg:x="15156" fg:w="11"/><text x="95.7329%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 0.07%)</title><rect x="95.4829%" y="181" width="0.0693%" height="15" fill="rgb(235,201,11)" fg:x="15156" fg:w="11"/><text x="95.7329%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.07%)</title><rect x="95.4829%" y="165" width="0.0693%" height="15" fill="rgb(207,46,11)" fg:x="15156" fg:w="11"/><text x="95.7329%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (61 samples, 0.38%)</title><rect x="95.5522%" y="197" width="0.3843%" height="15" fill="rgb(241,35,35)" fg:x="15167" fg:w="61"/><text x="95.8022%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (23 samples, 0.14%)</title><rect x="98.1604%" y="181" width="0.1449%" height="15" fill="rgb(243,32,47)" fg:x="15581" fg:w="23"/><text x="98.4104%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (23 samples, 0.14%)</title><rect x="98.1604%" y="165" width="0.1449%" height="15" fill="rgb(247,202,23)" fg:x="15581" fg:w="23"/><text x="98.4104%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (23 samples, 0.14%)</title><rect x="98.1604%" y="149" width="0.1449%" height="15" fill="rgb(219,102,11)" fg:x="15581" fg:w="23"/><text x="98.4104%" y="159.50"></text></g><g><title>motif_finder`motif_finder::base::Motif::single_motif_grad (629 samples, 3.96%)</title><rect x="95.4829%" y="213" width="3.9627%" height="15" fill="rgb(243,110,44)" fg:x="15156" fg:w="629"/><text x="95.7329%" y="223.50">moti..</text></g><g><title>motif_finder`motif_finder::waveform::Noise::ad_grad (557 samples, 3.51%)</title><rect x="95.9365%" y="197" width="3.5091%" height="15" fill="rgb(222,74,54)" fg:x="15228" fg:w="557"/><text x="96.1865%" y="207.50">mot..</text></g><g><title>motif_finder`core::slice::sort::recurse (181 samples, 1.14%)</title><rect x="98.3053%" y="181" width="1.1403%" height="15" fill="rgb(216,99,12)" fg:x="15604" fg:w="181"/><text x="98.5553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="99.6535%" y="197" width="0.0252%" height="15" fill="rgb(226,22,26)" fg:x="15818" fg:w="4"/><text x="99.9035%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.6661%" y="181" width="0.0126%" height="15" fill="rgb(217,163,10)" fg:x="15820" fg:w="2"/><text x="99.9161%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="99.6787%" y="197" width="0.0126%" height="15" fill="rgb(213,25,53)" fg:x="15822" fg:w="2"/><text x="99.9287%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.10%)</title><rect x="99.6913%" y="197" width="0.1008%" height="15" fill="rgb(252,105,26)" fg:x="15824" fg:w="16"/><text x="99.9413%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="99.7543%" y="181" width="0.0378%" height="15" fill="rgb(220,39,43)" fg:x="15834" fg:w="6"/><text x="100.0043%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="99.7921%" y="197" width="0.0315%" height="15" fill="rgb(229,68,48)" fg:x="15840" fg:w="5"/><text x="100.0421%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.04%)</title><rect x="99.8740%" y="149" width="0.0441%" height="15" fill="rgb(252,8,32)" fg:x="15853" fg:w="7"/><text x="100.1240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.07%)</title><rect x="99.8551%" y="181" width="0.0693%" height="15" fill="rgb(223,20,43)" fg:x="15850" fg:w="11"/><text x="100.1051%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.05%)</title><rect x="99.8740%" y="165" width="0.0504%" height="15" fill="rgb(229,81,49)" fg:x="15853" fg:w="8"/><text x="100.1240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.9244%" y="181" width="0.0126%" height="15" fill="rgb(236,28,36)" fg:x="15861" fg:w="2"/><text x="100.1744%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.9622%" y="165" width="0.0189%" height="15" fill="rgb(249,185,26)" fg:x="15867" fg:w="3"/><text x="100.2122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="99.9811%" y="165" width="0.0126%" height="15" fill="rgb(249,174,33)" fg:x="15870" fg:w="2"/><text x="100.2311%" y="175.50"></text></g><g><title>all (15,873 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="15873"/><text x="0.2500%" y="255.50"></text></g><g><title>motif_finder`motif_finder::main (724 samples, 4.56%)</title><rect x="95.4388%" y="229" width="4.5612%" height="15" fill="rgb(221,78,26)" fg:x="15149" fg:w="724"/><text x="95.6888%" y="239.50">motif..</text></g><g><title>motif_finder`motif_finder::sequence::Sequence::new_manual (88 samples, 0.55%)</title><rect x="99.4456%" y="213" width="0.5544%" height="15" fill="rgb(250,127,30)" fg:x="15785" fg:w="88"/><text x="99.6956%" y="223.50"></text></g><g><title>motif_finder`motif_finder::sequence::Sequence::return_bases (24 samples, 0.15%)</title><rect x="99.8488%" y="197" width="0.1512%" height="15" fill="rgb(230,49,44)" fg:x="15849" fg:w="24"/><text x="100.0988%" y="207.50"></text></g><g><title>motif_finder`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.06%)</title><rect x="99.9370%" y="181" width="0.0630%" height="15" fill="rgb(229,67,23)" fg:x="15863" fg:w="10"/><text x="100.1870%" y="191.50"></text></g></svg></svg>